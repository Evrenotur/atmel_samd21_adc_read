
SAMD21_ADC_L6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000206c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  0000206c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  20000064  000020d0  00020064  2**2
                  ALLOC
  3 .stack        00002000  200000a8  00002114  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000258d1  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000319c  00000000  00000000  000459b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000c28f  00000000  00000000  00048b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bb0  00000000  00000000  00054de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000fc8  00000000  00000000  00055991  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c38e  00000000  00000000  00056959  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f680  00000000  00000000  00072ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008f4a6  00000000  00000000  00082367  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002430  00000000  00000000  00111810  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 20 00 20 65 01 00 00 61 01 00 00 61 01 00 00     . . e...a...a...
	...
      2c:	61 01 00 00 00 00 00 00 00 00 00 00 61 01 00 00     a...........a...
      3c:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
      4c:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
      5c:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
      6c:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
      7c:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
      8c:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
      9c:	61 01 00 00 61 01 00 00 61 01 00 00 61 01 00 00     a...a...a...a...
      ac:	61 01 00 00 00 00 00 00                             a.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	0000206c 	.word	0x0000206c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	0000206c 	.word	0x0000206c
     10c:	0000206c 	.word	0x0000206c
     110:	00000000 	.word	0x00000000

00000114 <adc_enable>:
 */ 
#include <atmel_start.h>
#include "adc_read.h"

void adc_enable()
{
     114:	b510      	push	{r4, lr}
	
	adc_sync_enable_channel(&ADC_0,0);
     116:	2100      	movs	r1, #0
     118:	4801      	ldr	r0, [pc, #4]	; (120 <adc_enable+0xc>)
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <adc_enable+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	200000a0 	.word	0x200000a0
     124:	000003c9 	.word	0x000003c9

00000128 <ADC_Read>:

int ADC_Read(ADC_ReadTypeDef_t * ADC_ReadTypeDef)
{
     128:	b570      	push	{r4, r5, r6, lr}
     12a:	0004      	movs	r4, r0
	adc_sync_read_channel(&ADC_0,0,ADC_ReadTypeDef->buffer,2);
     12c:	2302      	movs	r3, #2
     12e:	0002      	movs	r2, r0
     130:	2100      	movs	r1, #0
     132:	4804      	ldr	r0, [pc, #16]	; (144 <ADC_Read+0x1c>)
     134:	4d04      	ldr	r5, [pc, #16]	; (148 <ADC_Read+0x20>)
     136:	47a8      	blx	r5
	ADC_ReadTypeDef->PA06_ADC_value = (ADC_ReadTypeDef->buffer[1] << 8) + ADC_ReadTypeDef->buffer[0];
     138:	7860      	ldrb	r0, [r4, #1]
     13a:	0200      	lsls	r0, r0, #8
     13c:	7823      	ldrb	r3, [r4, #0]
     13e:	18c0      	adds	r0, r0, r3
     140:	6060      	str	r0, [r4, #4]
	return ADC_ReadTypeDef->PA06_ADC_value;
     142:	bd70      	pop	{r4, r5, r6, pc}
     144:	200000a0 	.word	0x200000a0
     148:	000003f5 	.word	0x000003f5

0000014c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     14c:	b510      	push	{r4, lr}
	system_init();
     14e:	4b02      	ldr	r3, [pc, #8]	; (158 <atmel_start_init+0xc>)
     150:	4798      	blx	r3
	stdio_redirect_init();
     152:	4b02      	ldr	r3, [pc, #8]	; (15c <atmel_start_init+0x10>)
     154:	4798      	blx	r3
}
     156:	bd10      	pop	{r4, pc}
     158:	00000371 	.word	0x00000371
     15c:	00000bc1 	.word	0x00000bc1

00000160 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     160:	e7fe      	b.n	160 <Dummy_Handler>
	...

00000164 <Reset_Handler>:
{
     164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     166:	4a2a      	ldr	r2, [pc, #168]	; (210 <Reset_Handler+0xac>)
     168:	4b2a      	ldr	r3, [pc, #168]	; (214 <Reset_Handler+0xb0>)
     16a:	429a      	cmp	r2, r3
     16c:	d011      	beq.n	192 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     16e:	001a      	movs	r2, r3
     170:	4b29      	ldr	r3, [pc, #164]	; (218 <Reset_Handler+0xb4>)
     172:	429a      	cmp	r2, r3
     174:	d20d      	bcs.n	192 <Reset_Handler+0x2e>
     176:	4a29      	ldr	r2, [pc, #164]	; (21c <Reset_Handler+0xb8>)
     178:	3303      	adds	r3, #3
     17a:	1a9b      	subs	r3, r3, r2
     17c:	089b      	lsrs	r3, r3, #2
     17e:	3301      	adds	r3, #1
     180:	009b      	lsls	r3, r3, #2
     182:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     184:	4823      	ldr	r0, [pc, #140]	; (214 <Reset_Handler+0xb0>)
     186:	4922      	ldr	r1, [pc, #136]	; (210 <Reset_Handler+0xac>)
     188:	588c      	ldr	r4, [r1, r2]
     18a:	5084      	str	r4, [r0, r2]
     18c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     18e:	429a      	cmp	r2, r3
     190:	d1fa      	bne.n	188 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     192:	4a23      	ldr	r2, [pc, #140]	; (220 <Reset_Handler+0xbc>)
     194:	4b23      	ldr	r3, [pc, #140]	; (224 <Reset_Handler+0xc0>)
     196:	429a      	cmp	r2, r3
     198:	d20a      	bcs.n	1b0 <Reset_Handler+0x4c>
     19a:	43d3      	mvns	r3, r2
     19c:	4921      	ldr	r1, [pc, #132]	; (224 <Reset_Handler+0xc0>)
     19e:	185b      	adds	r3, r3, r1
     1a0:	2103      	movs	r1, #3
     1a2:	438b      	bics	r3, r1
     1a4:	3304      	adds	r3, #4
     1a6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     1a8:	2100      	movs	r1, #0
     1aa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     1ac:	4293      	cmp	r3, r2
     1ae:	d1fc      	bne.n	1aa <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     1b0:	4a1d      	ldr	r2, [pc, #116]	; (228 <Reset_Handler+0xc4>)
     1b2:	21ff      	movs	r1, #255	; 0xff
     1b4:	4b1d      	ldr	r3, [pc, #116]	; (22c <Reset_Handler+0xc8>)
     1b6:	438b      	bics	r3, r1
     1b8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     1ba:	39fd      	subs	r1, #253	; 0xfd
     1bc:	2390      	movs	r3, #144	; 0x90
     1be:	005b      	lsls	r3, r3, #1
     1c0:	4a1b      	ldr	r2, [pc, #108]	; (230 <Reset_Handler+0xcc>)
     1c2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     1c4:	4a1b      	ldr	r2, [pc, #108]	; (234 <Reset_Handler+0xd0>)
     1c6:	78d3      	ldrb	r3, [r2, #3]
     1c8:	2503      	movs	r5, #3
     1ca:	43ab      	bics	r3, r5
     1cc:	2402      	movs	r4, #2
     1ce:	4323      	orrs	r3, r4
     1d0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     1d2:	78d3      	ldrb	r3, [r2, #3]
     1d4:	270c      	movs	r7, #12
     1d6:	43bb      	bics	r3, r7
     1d8:	2608      	movs	r6, #8
     1da:	4333      	orrs	r3, r6
     1dc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1de:	4b16      	ldr	r3, [pc, #88]	; (238 <Reset_Handler+0xd4>)
     1e0:	7b98      	ldrb	r0, [r3, #14]
     1e2:	2230      	movs	r2, #48	; 0x30
     1e4:	4390      	bics	r0, r2
     1e6:	2220      	movs	r2, #32
     1e8:	4310      	orrs	r0, r2
     1ea:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1ec:	7b99      	ldrb	r1, [r3, #14]
     1ee:	43b9      	bics	r1, r7
     1f0:	4331      	orrs	r1, r6
     1f2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1f4:	7b9a      	ldrb	r2, [r3, #14]
     1f6:	43aa      	bics	r2, r5
     1f8:	4322      	orrs	r2, r4
     1fa:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1fc:	4a0f      	ldr	r2, [pc, #60]	; (23c <Reset_Handler+0xd8>)
     1fe:	6853      	ldr	r3, [r2, #4]
     200:	2180      	movs	r1, #128	; 0x80
     202:	430b      	orrs	r3, r1
     204:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     206:	4b0e      	ldr	r3, [pc, #56]	; (240 <Reset_Handler+0xdc>)
     208:	4798      	blx	r3
        main();
     20a:	4b0e      	ldr	r3, [pc, #56]	; (244 <Reset_Handler+0xe0>)
     20c:	4798      	blx	r3
     20e:	e7fe      	b.n	20e <Reset_Handler+0xaa>
     210:	0000206c 	.word	0x0000206c
     214:	20000000 	.word	0x20000000
     218:	20000064 	.word	0x20000064
     21c:	20000004 	.word	0x20000004
     220:	20000064 	.word	0x20000064
     224:	200000a8 	.word	0x200000a8
     228:	e000ed00 	.word	0xe000ed00
     22c:	00000000 	.word	0x00000000
     230:	41007000 	.word	0x41007000
     234:	41005000 	.word	0x41005000
     238:	41004800 	.word	0x41004800
     23c:	41004000 	.word	0x41004000
     240:	00000ecd 	.word	0x00000ecd
     244:	00000ac1 	.word	0x00000ac1

00000248 <ADC_0_PORT_init>:
struct adc_sync_descriptor ADC_0;

struct usart_sync_descriptor TARGET_IO;

void ADC_0_PORT_init(void)
{
     248:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     24a:	2240      	movs	r2, #64	; 0x40
     24c:	23c0      	movs	r3, #192	; 0xc0
     24e:	05db      	lsls	r3, r3, #23
     250:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     252:	490a      	ldr	r1, [pc, #40]	; (27c <ADC_0_PORT_init+0x34>)
     254:	4b0a      	ldr	r3, [pc, #40]	; (280 <ADC_0_PORT_init+0x38>)
     256:	628b      	str	r3, [r1, #40]	; 0x28
     258:	23c0      	movs	r3, #192	; 0xc0
     25a:	061b      	lsls	r3, r3, #24
     25c:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     25e:	2346      	movs	r3, #70	; 0x46
     260:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
     262:	2001      	movs	r0, #1
     264:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     266:	4302      	orrs	r2, r0
     268:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     26a:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     26c:	2233      	movs	r2, #51	; 0x33
     26e:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     270:	240f      	movs	r4, #15
     272:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
     274:	4303      	orrs	r3, r0
     276:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     278:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06B_ADC_AIN6);
}
     27a:	bd10      	pop	{r4, pc}
     27c:	41004400 	.word	0x41004400
     280:	40000040 	.word	0x40000040

00000284 <ADC_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     284:	4a04      	ldr	r2, [pc, #16]	; (298 <ADC_0_CLOCK_init+0x14>)
     286:	6a11      	ldr	r1, [r2, #32]
     288:	2380      	movs	r3, #128	; 0x80
     28a:	025b      	lsls	r3, r3, #9
     28c:	430b      	orrs	r3, r1
     28e:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     290:	4a02      	ldr	r2, [pc, #8]	; (29c <ADC_0_CLOCK_init+0x18>)
     292:	4b03      	ldr	r3, [pc, #12]	; (2a0 <ADC_0_CLOCK_init+0x1c>)
     294:	805a      	strh	r2, [r3, #2]

void ADC_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, ADC);
	_gclk_enable_channel(ADC_GCLK_ID, CONF_GCLK_ADC_SRC);
}
     296:	4770      	bx	lr
     298:	40000400 	.word	0x40000400
     29c:	0000401e 	.word	0x0000401e
     2a0:	40000c00 	.word	0x40000c00

000002a4 <ADC_0_init>:

void ADC_0_init(void)
{
     2a4:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     2a6:	4b05      	ldr	r3, [pc, #20]	; (2bc <ADC_0_init+0x18>)
     2a8:	4798      	blx	r3
	ADC_0_PORT_init();
     2aa:	4b05      	ldr	r3, [pc, #20]	; (2c0 <ADC_0_init+0x1c>)
     2ac:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC, (void *)NULL);
     2ae:	2200      	movs	r2, #0
     2b0:	4904      	ldr	r1, [pc, #16]	; (2c4 <ADC_0_init+0x20>)
     2b2:	4805      	ldr	r0, [pc, #20]	; (2c8 <ADC_0_init+0x24>)
     2b4:	4b05      	ldr	r3, [pc, #20]	; (2cc <ADC_0_init+0x28>)
     2b6:	4798      	blx	r3
}
     2b8:	bd10      	pop	{r4, pc}
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	00000285 	.word	0x00000285
     2c0:	00000249 	.word	0x00000249
     2c4:	42004000 	.word	0x42004000
     2c8:	200000a0 	.word	0x200000a0
     2cc:	00000395 	.word	0x00000395

000002d0 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     2d0:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2d2:	4b0e      	ldr	r3, [pc, #56]	; (30c <TARGET_IO_PORT_init+0x3c>)
     2d4:	2256      	movs	r2, #86	; 0x56
     2d6:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2d8:	2501      	movs	r5, #1
     2da:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2dc:	2401      	movs	r4, #1
     2de:	4321      	orrs	r1, r4
     2e0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2e2:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2e4:	203b      	movs	r0, #59	; 0x3b
     2e6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2e8:	3a47      	subs	r2, #71	; 0x47
     2ea:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     2ec:	3a0d      	subs	r2, #13
     2ee:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2f0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2f2:	2157      	movs	r1, #87	; 0x57
     2f4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2f6:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2f8:	4322      	orrs	r2, r4
     2fa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2fc:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2fe:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     300:	3948      	subs	r1, #72	; 0x48
     302:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     304:	3111      	adds	r1, #17
     306:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     308:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     30a:	bd30      	pop	{r4, r5, pc}
     30c:	41004400 	.word	0x41004400

00000310 <TARGET_IO_CLOCK_init>:
     310:	4a04      	ldr	r2, [pc, #16]	; (324 <TARGET_IO_CLOCK_init+0x14>)
     312:	6a13      	ldr	r3, [r2, #32]
     314:	2120      	movs	r1, #32
     316:	430b      	orrs	r3, r1
     318:	6213      	str	r3, [r2, #32]
     31a:	4a03      	ldr	r2, [pc, #12]	; (328 <TARGET_IO_CLOCK_init+0x18>)
     31c:	4b03      	ldr	r3, [pc, #12]	; (32c <TARGET_IO_CLOCK_init+0x1c>)
     31e:	805a      	strh	r2, [r3, #2]

void TARGET_IO_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     320:	4770      	bx	lr
     322:	46c0      	nop			; (mov r8, r8)
     324:	40000400 	.word	0x40000400
     328:	00004017 	.word	0x00004017
     32c:	40000c00 	.word	0x40000c00

00000330 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     330:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     332:	4b05      	ldr	r3, [pc, #20]	; (348 <TARGET_IO_init+0x18>)
     334:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM3, (void *)NULL);
     336:	2200      	movs	r2, #0
     338:	4904      	ldr	r1, [pc, #16]	; (34c <TARGET_IO_init+0x1c>)
     33a:	4805      	ldr	r0, [pc, #20]	; (350 <TARGET_IO_init+0x20>)
     33c:	4b05      	ldr	r3, [pc, #20]	; (354 <TARGET_IO_init+0x24>)
     33e:	4798      	blx	r3
	TARGET_IO_PORT_init();
     340:	4b05      	ldr	r3, [pc, #20]	; (358 <TARGET_IO_init+0x28>)
     342:	4798      	blx	r3
}
     344:	bd10      	pop	{r4, pc}
     346:	46c0      	nop			; (mov r8, r8)
     348:	00000311 	.word	0x00000311
     34c:	42001400 	.word	0x42001400
     350:	20000094 	.word	0x20000094
     354:	00000635 	.word	0x00000635
     358:	000002d1 	.word	0x000002d1

0000035c <delay_driver_init>:

void delay_driver_init(void)
{
     35c:	b510      	push	{r4, lr}
	delay_init(SysTick);
     35e:	4802      	ldr	r0, [pc, #8]	; (368 <delay_driver_init+0xc>)
     360:	4b02      	ldr	r3, [pc, #8]	; (36c <delay_driver_init+0x10>)
     362:	4798      	blx	r3
}
     364:	bd10      	pop	{r4, pc}
     366:	46c0      	nop			; (mov r8, r8)
     368:	e000e010 	.word	0xe000e010
     36c:	000004b5 	.word	0x000004b5

00000370 <system_init>:

void system_init(void)
{
     370:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     372:	4b04      	ldr	r3, [pc, #16]	; (384 <system_init+0x14>)
     374:	4798      	blx	r3
	init_mcu();

	ADC_0_init();
     376:	4b04      	ldr	r3, [pc, #16]	; (388 <system_init+0x18>)
     378:	4798      	blx	r3

	TARGET_IO_init();
     37a:	4b04      	ldr	r3, [pc, #16]	; (38c <system_init+0x1c>)
     37c:	4798      	blx	r3

	delay_driver_init();
     37e:	4b04      	ldr	r3, [pc, #16]	; (390 <system_init+0x20>)
     380:	4798      	blx	r3
}
     382:	bd10      	pop	{r4, pc}
     384:	00000889 	.word	0x00000889
     388:	000002a5 	.word	0x000002a5
     38c:	00000331 	.word	0x00000331
     390:	0000035d 	.word	0x0000035d

00000394 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     394:	b570      	push	{r4, r5, r6, lr}
     396:	0004      	movs	r4, r0
     398:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     39a:	2800      	cmp	r0, #0
     39c:	d00c      	beq.n	3b8 <adc_sync_init+0x24>
     39e:	0008      	movs	r0, r1
     3a0:	1e43      	subs	r3, r0, #1
     3a2:	4198      	sbcs	r0, r3
     3a4:	b2c0      	uxtb	r0, r0
     3a6:	2239      	movs	r2, #57	; 0x39
     3a8:	4904      	ldr	r1, [pc, #16]	; (3bc <adc_sync_init+0x28>)
     3aa:	4b05      	ldr	r3, [pc, #20]	; (3c0 <adc_sync_init+0x2c>)
     3ac:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     3ae:	0029      	movs	r1, r5
     3b0:	0020      	movs	r0, r4
     3b2:	4b04      	ldr	r3, [pc, #16]	; (3c4 <adc_sync_init+0x30>)
     3b4:	4798      	blx	r3
}
     3b6:	bd70      	pop	{r4, r5, r6, pc}
     3b8:	2000      	movs	r0, #0
     3ba:	e7f4      	b.n	3a6 <adc_sync_init+0x12>
     3bc:	00001f08 	.word	0x00001f08
     3c0:	000006ad 	.word	0x000006ad
     3c4:	000007f9 	.word	0x000007f9

000003c8 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     3c8:	b570      	push	{r4, r5, r6, lr}
     3ca:	0004      	movs	r4, r0
     3cc:	000d      	movs	r5, r1
	ASSERT(descr);
     3ce:	1e43      	subs	r3, r0, #1
     3d0:	4198      	sbcs	r0, r3
     3d2:	b2c0      	uxtb	r0, r0
     3d4:	224e      	movs	r2, #78	; 0x4e
     3d6:	4904      	ldr	r1, [pc, #16]	; (3e8 <adc_sync_enable_channel+0x20>)
     3d8:	4b04      	ldr	r3, [pc, #16]	; (3ec <adc_sync_enable_channel+0x24>)
     3da:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     3dc:	0029      	movs	r1, r5
     3de:	0020      	movs	r0, r4
     3e0:	4b03      	ldr	r3, [pc, #12]	; (3f0 <adc_sync_enable_channel+0x28>)
     3e2:	4798      	blx	r3

	return ERR_NONE;
}
     3e4:	2000      	movs	r0, #0
     3e6:	bd70      	pop	{r4, r5, r6, pc}
     3e8:	00001f08 	.word	0x00001f08
     3ec:	000006ad 	.word	0x000006ad
     3f0:	00000831 	.word	0x00000831

000003f4 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f6:	46de      	mov	lr, fp
     3f8:	4657      	mov	r7, sl
     3fa:	464e      	mov	r6, r9
     3fc:	4645      	mov	r5, r8
     3fe:	b5e0      	push	{r5, r6, r7, lr}
     400:	b083      	sub	sp, #12
     402:	0006      	movs	r6, r0
     404:	000d      	movs	r5, r1
     406:	4691      	mov	r9, r2
     408:	9301      	str	r3, [sp, #4]
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     40a:	2800      	cmp	r0, #0
     40c:	d01e      	beq.n	44c <adc_sync_read_channel+0x58>
     40e:	2a00      	cmp	r2, #0
     410:	d01e      	beq.n	450 <adc_sync_read_channel+0x5c>
     412:	0018      	movs	r0, r3
     414:	1e43      	subs	r3, r0, #1
     416:	4198      	sbcs	r0, r3
     418:	2267      	movs	r2, #103	; 0x67
     41a:	491f      	ldr	r1, [pc, #124]	; (498 <adc_sync_read_channel+0xa4>)
     41c:	4f1f      	ldr	r7, [pc, #124]	; (49c <adc_sync_read_channel+0xa8>)
     41e:	47b8      	blx	r7
	data_size = _adc_sync_get_data_size(&descr->device);
     420:	0034      	movs	r4, r6
     422:	0030      	movs	r0, r6
     424:	4b1e      	ldr	r3, [pc, #120]	; (4a0 <adc_sync_read_channel+0xac>)
     426:	4798      	blx	r3
     428:	0001      	movs	r1, r0
     42a:	4680      	mov	r8, r0
	ASSERT(!(length % data_size));
     42c:	9801      	ldr	r0, [sp, #4]
     42e:	4b1d      	ldr	r3, [pc, #116]	; (4a4 <adc_sync_read_channel+0xb0>)
     430:	4798      	blx	r3
     432:	4248      	negs	r0, r1
     434:	4148      	adcs	r0, r1
     436:	b2c0      	uxtb	r0, r0
     438:	2269      	movs	r2, #105	; 0x69
     43a:	4917      	ldr	r1, [pc, #92]	; (498 <adc_sync_read_channel+0xa4>)
     43c:	47b8      	blx	r7
	uint16_t offset = 0;
     43e:	2700      	movs	r7, #0

	do {
		uint16_t result;
		_adc_sync_convert(&descr->device);
     440:	4b19      	ldr	r3, [pc, #100]	; (4a8 <adc_sync_read_channel+0xb4>)
     442:	469b      	mov	fp, r3

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     444:	4e19      	ldr	r6, [pc, #100]	; (4ac <adc_sync_read_channel+0xb8>)
			;

		result         = _adc_sync_read_channel_data(&descr->device, channel);
     446:	4b1a      	ldr	r3, [pc, #104]	; (4b0 <adc_sync_read_channel+0xbc>)
     448:	469a      	mov	sl, r3
     44a:	e008      	b.n	45e <adc_sync_read_channel+0x6a>
	ASSERT(descr && buffer && length);
     44c:	2000      	movs	r0, #0
     44e:	e7e3      	b.n	418 <adc_sync_read_channel+0x24>
     450:	2000      	movs	r0, #0
     452:	e7e1      	b.n	418 <adc_sync_read_channel+0x24>
     454:	4447      	add	r7, r8
     456:	b2bf      	uxth	r7, r7
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
	} while (offset < length);
     458:	9b01      	ldr	r3, [sp, #4]
     45a:	42bb      	cmp	r3, r7
     45c:	d913      	bls.n	486 <adc_sync_read_channel+0x92>
		_adc_sync_convert(&descr->device);
     45e:	0020      	movs	r0, r4
     460:	47d8      	blx	fp
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     462:	0029      	movs	r1, r5
     464:	0020      	movs	r0, r4
     466:	47b0      	blx	r6
     468:	2800      	cmp	r0, #0
     46a:	d0fa      	beq.n	462 <adc_sync_read_channel+0x6e>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     46c:	0029      	movs	r1, r5
     46e:	0020      	movs	r0, r4
     470:	47d0      	blx	sl
		buffer[offset] = result;
     472:	464b      	mov	r3, r9
     474:	55d8      	strb	r0, [r3, r7]
		if (1 < data_size) {
     476:	4643      	mov	r3, r8
     478:	2b01      	cmp	r3, #1
     47a:	d9eb      	bls.n	454 <adc_sync_read_channel+0x60>
			buffer[offset + 1] = result >> 8;
     47c:	464b      	mov	r3, r9
     47e:	19db      	adds	r3, r3, r7
     480:	0a00      	lsrs	r0, r0, #8
     482:	7058      	strb	r0, [r3, #1]
     484:	e7e6      	b.n	454 <adc_sync_read_channel+0x60>

	return offset;
}
     486:	0038      	movs	r0, r7
     488:	b003      	add	sp, #12
     48a:	bc3c      	pop	{r2, r3, r4, r5}
     48c:	4690      	mov	r8, r2
     48e:	4699      	mov	r9, r3
     490:	46a2      	mov	sl, r4
     492:	46ab      	mov	fp, r5
     494:	bdf0      	pop	{r4, r5, r6, r7, pc}
     496:	46c0      	nop			; (mov r8, r8)
     498:	00001f08 	.word	0x00001f08
     49c:	000006ad 	.word	0x000006ad
     4a0:	0000083d 	.word	0x0000083d
     4a4:	00000ec1 	.word	0x00000ec1
     4a8:	0000085f 	.word	0x0000085f
     4ac:	00000855 	.word	0x00000855
     4b0:	00000871 	.word	0x00000871

000004b4 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     4b4:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     4b6:	4b02      	ldr	r3, [pc, #8]	; (4c0 <delay_init+0xc>)
     4b8:	6018      	str	r0, [r3, #0]
     4ba:	4b02      	ldr	r3, [pc, #8]	; (4c4 <delay_init+0x10>)
     4bc:	4798      	blx	r3
}
     4be:	bd10      	pop	{r4, pc}
     4c0:	20000080 	.word	0x20000080
     4c4:	00000a59 	.word	0x00000a59

000004c8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     4c8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     4ca:	4b04      	ldr	r3, [pc, #16]	; (4dc <delay_ms+0x14>)
     4cc:	681c      	ldr	r4, [r3, #0]
     4ce:	4b04      	ldr	r3, [pc, #16]	; (4e0 <delay_ms+0x18>)
     4d0:	4798      	blx	r3
     4d2:	0001      	movs	r1, r0
     4d4:	0020      	movs	r0, r4
     4d6:	4b03      	ldr	r3, [pc, #12]	; (4e4 <delay_ms+0x1c>)
     4d8:	4798      	blx	r3
}
     4da:	bd10      	pop	{r4, pc}
     4dc:	20000080 	.word	0x20000080
     4e0:	0000087f 	.word	0x0000087f
     4e4:	00000a6d 	.word	0x00000a6d

000004e8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4e8:	b570      	push	{r4, r5, r6, lr}
     4ea:	0006      	movs	r6, r0
     4ec:	000c      	movs	r4, r1
     4ee:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     4f0:	2800      	cmp	r0, #0
     4f2:	d00d      	beq.n	510 <io_write+0x28>
     4f4:	0008      	movs	r0, r1
     4f6:	1e43      	subs	r3, r0, #1
     4f8:	4198      	sbcs	r0, r3
     4fa:	b2c0      	uxtb	r0, r0
     4fc:	2234      	movs	r2, #52	; 0x34
     4fe:	4905      	ldr	r1, [pc, #20]	; (514 <io_write+0x2c>)
     500:	4b05      	ldr	r3, [pc, #20]	; (518 <io_write+0x30>)
     502:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     504:	6833      	ldr	r3, [r6, #0]
     506:	002a      	movs	r2, r5
     508:	0021      	movs	r1, r4
     50a:	0030      	movs	r0, r6
     50c:	4798      	blx	r3
}
     50e:	bd70      	pop	{r4, r5, r6, pc}
     510:	2000      	movs	r0, #0
     512:	e7f3      	b.n	4fc <io_write+0x14>
     514:	00001f24 	.word	0x00001f24
     518:	000006ad 	.word	0x000006ad

0000051c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     51c:	b570      	push	{r4, r5, r6, lr}
     51e:	0006      	movs	r6, r0
     520:	000c      	movs	r4, r1
     522:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     524:	2800      	cmp	r0, #0
     526:	d00d      	beq.n	544 <io_read+0x28>
     528:	0008      	movs	r0, r1
     52a:	1e43      	subs	r3, r0, #1
     52c:	4198      	sbcs	r0, r3
     52e:	b2c0      	uxtb	r0, r0
     530:	223d      	movs	r2, #61	; 0x3d
     532:	4905      	ldr	r1, [pc, #20]	; (548 <io_read+0x2c>)
     534:	4b05      	ldr	r3, [pc, #20]	; (54c <io_read+0x30>)
     536:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     538:	6873      	ldr	r3, [r6, #4]
     53a:	002a      	movs	r2, r5
     53c:	0021      	movs	r1, r4
     53e:	0030      	movs	r0, r6
     540:	4798      	blx	r3
}
     542:	bd70      	pop	{r4, r5, r6, pc}
     544:	2000      	movs	r0, #0
     546:	e7f3      	b.n	530 <io_read+0x14>
     548:	00001f24 	.word	0x00001f24
     54c:	000006ad 	.word	0x000006ad

00000550 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     552:	46ce      	mov	lr, r9
     554:	4647      	mov	r7, r8
     556:	b580      	push	{r7, lr}
     558:	0004      	movs	r4, r0
     55a:	000f      	movs	r7, r1
     55c:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     55e:	2800      	cmp	r0, #0
     560:	d026      	beq.n	5b0 <usart_sync_write+0x60>
     562:	2900      	cmp	r1, #0
     564:	d026      	beq.n	5b4 <usart_sync_write+0x64>
     566:	0010      	movs	r0, r2
     568:	1e43      	subs	r3, r0, #1
     56a:	4198      	sbcs	r0, r3
     56c:	22f1      	movs	r2, #241	; 0xf1
     56e:	4912      	ldr	r1, [pc, #72]	; (5b8 <usart_sync_write+0x68>)
     570:	4b12      	ldr	r3, [pc, #72]	; (5bc <usart_sync_write+0x6c>)
     572:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     574:	3408      	adds	r4, #8
     576:	4d12      	ldr	r5, [pc, #72]	; (5c0 <usart_sync_write+0x70>)
     578:	0020      	movs	r0, r4
     57a:	47a8      	blx	r5
     57c:	2800      	cmp	r0, #0
     57e:	d0fb      	beq.n	578 <usart_sync_write+0x28>
     580:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     582:	4b10      	ldr	r3, [pc, #64]	; (5c4 <usart_sync_write+0x74>)
     584:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     586:	4d0e      	ldr	r5, [pc, #56]	; (5c0 <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     588:	5db9      	ldrb	r1, [r7, r6]
     58a:	0020      	movs	r0, r4
     58c:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     58e:	0020      	movs	r0, r4
     590:	47a8      	blx	r5
     592:	2800      	cmp	r0, #0
     594:	d0fb      	beq.n	58e <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     596:	3601      	adds	r6, #1
     598:	4546      	cmp	r6, r8
     59a:	d3f5      	bcc.n	588 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     59c:	4d0a      	ldr	r5, [pc, #40]	; (5c8 <usart_sync_write+0x78>)
     59e:	0020      	movs	r0, r4
     5a0:	47a8      	blx	r5
     5a2:	2800      	cmp	r0, #0
     5a4:	d0fb      	beq.n	59e <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     5a6:	0030      	movs	r0, r6
     5a8:	bc0c      	pop	{r2, r3}
     5aa:	4690      	mov	r8, r2
     5ac:	4699      	mov	r9, r3
     5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     5b0:	2000      	movs	r0, #0
     5b2:	e7db      	b.n	56c <usart_sync_write+0x1c>
     5b4:	2000      	movs	r0, #0
     5b6:	e7d9      	b.n	56c <usart_sync_write+0x1c>
     5b8:	00001f38 	.word	0x00001f38
     5bc:	000006ad 	.word	0x000006ad
     5c0:	000009e5 	.word	0x000009e5
     5c4:	000009d5 	.word	0x000009d5
     5c8:	000009ef 	.word	0x000009ef

000005cc <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5ce:	46ce      	mov	lr, r9
     5d0:	4647      	mov	r7, r8
     5d2:	b580      	push	{r7, lr}
     5d4:	0004      	movs	r4, r0
     5d6:	000f      	movs	r7, r1
     5d8:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     5da:	2800      	cmp	r0, #0
     5dc:	d01d      	beq.n	61a <usart_sync_read+0x4e>
     5de:	2900      	cmp	r1, #0
     5e0:	d01d      	beq.n	61e <usart_sync_read+0x52>
     5e2:	0010      	movs	r0, r2
     5e4:	1e43      	subs	r3, r0, #1
     5e6:	4198      	sbcs	r0, r3
     5e8:	2286      	movs	r2, #134	; 0x86
     5ea:	0052      	lsls	r2, r2, #1
     5ec:	490d      	ldr	r1, [pc, #52]	; (624 <usart_sync_read+0x58>)
     5ee:	4b0e      	ldr	r3, [pc, #56]	; (628 <usart_sync_read+0x5c>)
     5f0:	4798      	blx	r3
	uint32_t                      offset = 0;
     5f2:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     5f4:	3408      	adds	r4, #8
     5f6:	4d0d      	ldr	r5, [pc, #52]	; (62c <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     5f8:	4b0d      	ldr	r3, [pc, #52]	; (630 <usart_sync_read+0x64>)
     5fa:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     5fc:	0020      	movs	r0, r4
     5fe:	47a8      	blx	r5
     600:	2800      	cmp	r0, #0
     602:	d0fb      	beq.n	5fc <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     604:	0020      	movs	r0, r4
     606:	47c8      	blx	r9
     608:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     60a:	3601      	adds	r6, #1
     60c:	4546      	cmp	r6, r8
     60e:	d3f5      	bcc.n	5fc <usart_sync_read+0x30>

	return (int32_t)offset;
}
     610:	0030      	movs	r0, r6
     612:	bc0c      	pop	{r2, r3}
     614:	4690      	mov	r8, r2
     616:	4699      	mov	r9, r3
     618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     61a:	2000      	movs	r0, #0
     61c:	e7e4      	b.n	5e8 <usart_sync_read+0x1c>
     61e:	2000      	movs	r0, #0
     620:	e7e2      	b.n	5e8 <usart_sync_read+0x1c>
     622:	46c0      	nop			; (mov r8, r8)
     624:	00001f38 	.word	0x00001f38
     628:	000006ad 	.word	0x000006ad
     62c:	000009f9 	.word	0x000009f9
     630:	000009dd 	.word	0x000009dd

00000634 <usart_sync_init>:
{
     634:	b570      	push	{r4, r5, r6, lr}
     636:	0005      	movs	r5, r0
     638:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     63a:	2800      	cmp	r0, #0
     63c:	d013      	beq.n	666 <usart_sync_init+0x32>
     63e:	0008      	movs	r0, r1
     640:	1e43      	subs	r3, r0, #1
     642:	4198      	sbcs	r0, r3
     644:	b2c0      	uxtb	r0, r0
     646:	2234      	movs	r2, #52	; 0x34
     648:	4908      	ldr	r1, [pc, #32]	; (66c <usart_sync_init+0x38>)
     64a:	4b09      	ldr	r3, [pc, #36]	; (670 <usart_sync_init+0x3c>)
     64c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     64e:	0028      	movs	r0, r5
     650:	3008      	adds	r0, #8
     652:	0021      	movs	r1, r4
     654:	4b07      	ldr	r3, [pc, #28]	; (674 <usart_sync_init+0x40>)
     656:	4798      	blx	r3
	if (init_status) {
     658:	2800      	cmp	r0, #0
     65a:	d103      	bne.n	664 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     65c:	4b06      	ldr	r3, [pc, #24]	; (678 <usart_sync_init+0x44>)
     65e:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     660:	4b06      	ldr	r3, [pc, #24]	; (67c <usart_sync_init+0x48>)
     662:	602b      	str	r3, [r5, #0]
}
     664:	bd70      	pop	{r4, r5, r6, pc}
     666:	2000      	movs	r0, #0
     668:	e7ed      	b.n	646 <usart_sync_init+0x12>
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	00001f38 	.word	0x00001f38
     670:	000006ad 	.word	0x000006ad
     674:	00000995 	.word	0x00000995
     678:	000005cd 	.word	0x000005cd
     67c:	00000551 	.word	0x00000551

00000680 <usart_sync_enable>:
{
     680:	b510      	push	{r4, lr}
     682:	0004      	movs	r4, r0
	ASSERT(descr);
     684:	1e43      	subs	r3, r0, #1
     686:	4198      	sbcs	r0, r3
     688:	b2c0      	uxtb	r0, r0
     68a:	2253      	movs	r2, #83	; 0x53
     68c:	4904      	ldr	r1, [pc, #16]	; (6a0 <usart_sync_enable+0x20>)
     68e:	4b05      	ldr	r3, [pc, #20]	; (6a4 <usart_sync_enable+0x24>)
     690:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     692:	0020      	movs	r0, r4
     694:	3008      	adds	r0, #8
     696:	4b04      	ldr	r3, [pc, #16]	; (6a8 <usart_sync_enable+0x28>)
     698:	4798      	blx	r3
}
     69a:	2000      	movs	r0, #0
     69c:	bd10      	pop	{r4, pc}
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	00001f38 	.word	0x00001f38
     6a4:	000006ad 	.word	0x000006ad
     6a8:	000009c1 	.word	0x000009c1

000006ac <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     6ac:	2800      	cmp	r0, #0
     6ae:	d100      	bne.n	6b2 <assert+0x6>
		__asm("BKPT #0");
     6b0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     6b2:	4770      	bx	lr

000006b4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     6b4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     6b6:	4a06      	ldr	r2, [pc, #24]	; (6d0 <_sbrk+0x1c>)
     6b8:	6812      	ldr	r2, [r2, #0]
     6ba:	2a00      	cmp	r2, #0
     6bc:	d004      	beq.n	6c8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     6be:	4a04      	ldr	r2, [pc, #16]	; (6d0 <_sbrk+0x1c>)
     6c0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     6c2:	18c3      	adds	r3, r0, r3
     6c4:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     6c6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     6c8:	4902      	ldr	r1, [pc, #8]	; (6d4 <_sbrk+0x20>)
     6ca:	4a01      	ldr	r2, [pc, #4]	; (6d0 <_sbrk+0x1c>)
     6cc:	6011      	str	r1, [r2, #0]
     6ce:	e7f6      	b.n	6be <_sbrk+0xa>
     6d0:	20000084 	.word	0x20000084
     6d4:	200020a8 	.word	0x200020a8

000006d8 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     6d8:	2001      	movs	r0, #1
     6da:	4240      	negs	r0, r0
     6dc:	4770      	bx	lr

000006de <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     6de:	2380      	movs	r3, #128	; 0x80
     6e0:	019b      	lsls	r3, r3, #6
     6e2:	604b      	str	r3, [r1, #4]

	return 0;
}
     6e4:	2000      	movs	r0, #0
     6e6:	4770      	bx	lr

000006e8 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     6e8:	2001      	movs	r0, #1
     6ea:	4770      	bx	lr

000006ec <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     6ec:	2000      	movs	r0, #0
     6ee:	4770      	bx	lr

000006f0 <_adc_get_regs>:
		}
	}

	ASSERT(false);
	return 0;
}
     6f0:	2000      	movs	r0, #0
     6f2:	4770      	bx	lr

000006f4 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     6f4:	b570      	push	{r4, r5, r6, lr}
     6f6:	0004      	movs	r4, r0
     6f8:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
     6fa:	4b39      	ldr	r3, [pc, #228]	; (7e0 <_adc_init+0xec>)
     6fc:	18c0      	adds	r0, r0, r3
     6fe:	4242      	negs	r2, r0
     700:	4142      	adcs	r2, r0
     702:	b2d0      	uxtb	r0, r2
     704:	2294      	movs	r2, #148	; 0x94
     706:	4937      	ldr	r1, [pc, #220]	; (7e4 <_adc_init+0xf0>)
     708:	4b37      	ldr	r3, [pc, #220]	; (7e8 <_adc_init+0xf4>)
     70a:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     70c:	4b37      	ldr	r3, [pc, #220]	; (7ec <_adc_init+0xf8>)
     70e:	681a      	ldr	r2, [r3, #0]
     710:	0152      	lsls	r2, r2, #5
     712:	23e0      	movs	r3, #224	; 0xe0
     714:	00db      	lsls	r3, r3, #3
     716:	401a      	ands	r2, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
     718:	4b35      	ldr	r3, [pc, #212]	; (7f0 <_adc_init+0xfc>)
     71a:	6859      	ldr	r1, [r3, #4]
     71c:	0149      	lsls	r1, r1, #5
     71e:	681b      	ldr	r3, [r3, #0]
     720:	0edb      	lsrs	r3, r3, #27
     722:	430b      	orrs	r3, r1
     724:	21ff      	movs	r1, #255	; 0xff
     726:	400b      	ands	r3, r1
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     728:	431a      	orrs	r2, r3
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     72a:	7e63      	ldrb	r3, [r4, #25]
     72c:	09db      	lsrs	r3, r3, #7
     72e:	d1fc      	bne.n	72a <_adc_init+0x36>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
     730:	7823      	ldrb	r3, [r4, #0]

	hri_adc_wait_for_sync(hw);
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     732:	079b      	lsls	r3, r3, #30
     734:	d504      	bpl.n	740 <_adc_init+0x4c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     736:	2300      	movs	r3, #0
     738:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     73a:	7e63      	ldrb	r3, [r4, #25]
     73c:	09db      	lsrs	r3, r3, #7
     73e:	d1fc      	bne.n	73a <_adc_init+0x46>
	((Adc *)hw)->CTRLA.reg = data;
     740:	2301      	movs	r3, #1
     742:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     744:	7e63      	ldrb	r3, [r4, #25]
     746:	09db      	lsrs	r3, r3, #7
     748:	d1fc      	bne.n	744 <_adc_init+0x50>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     74a:	8522      	strh	r2, [r4, #40]	; 0x28
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	hri_adc_wait_for_sync(hw);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     74c:	00ea      	lsls	r2, r5, #3
     74e:	1b52      	subs	r2, r2, r5
     750:	0092      	lsls	r2, r2, #2
     752:	4b28      	ldr	r3, [pc, #160]	; (7f4 <_adc_init+0x100>)
     754:	189b      	adds	r3, r3, r2
     756:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->REFCTRL.reg = data;
     758:	7062      	strb	r2, [r4, #1]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     75a:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->AVGCTRL.reg = data;
     75c:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     75e:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->SAMPCTRL.reg = data;
     760:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     762:	7c1a      	ldrb	r2, [r3, #16]
	((Adc *)hw)->EVCTRL.reg = data;
     764:	7522      	strb	r2, [r4, #20]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     766:	8ada      	ldrh	r2, [r3, #22]
	((Adc *)hw)->GAINCORR.reg = data;
     768:	84a2      	strh	r2, [r4, #36]	; 0x24
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     76a:	8b1a      	ldrh	r2, [r3, #24]
	((Adc *)hw)->OFFSETCORR.reg = data;
     76c:	84e2      	strh	r2, [r4, #38]	; 0x26
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     76e:	7e99      	ldrb	r1, [r3, #26]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
     770:	222a      	movs	r2, #42	; 0x2a
     772:	54a1      	strb	r1, [r4, r2]
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     774:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->CTRLB.reg = data;
     776:	80a3      	strh	r3, [r4, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     778:	7e63      	ldrb	r3, [r4, #25]
     77a:	09db      	lsrs	r3, r3, #7
     77c:	d1fc      	bne.n	778 <_adc_init+0x84>
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     77e:	00eb      	lsls	r3, r5, #3
     780:	1b5b      	subs	r3, r3, r5
     782:	009b      	lsls	r3, r3, #2
     784:	4a1b      	ldr	r2, [pc, #108]	; (7f4 <_adc_init+0x100>)
     786:	18d3      	adds	r3, r2, r3
     788:	68db      	ldr	r3, [r3, #12]
	((Adc *)hw)->INPUTCTRL.reg = data;
     78a:	6123      	str	r3, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     78c:	7e63      	ldrb	r3, [r4, #25]
     78e:	09db      	lsrs	r3, r3, #7
     790:	d1fc      	bne.n	78c <_adc_init+0x98>
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
     792:	00eb      	lsls	r3, r5, #3
     794:	1b5b      	subs	r3, r3, r5
     796:	009b      	lsls	r3, r3, #2
     798:	4a16      	ldr	r2, [pc, #88]	; (7f4 <_adc_init+0x100>)
     79a:	18d3      	adds	r3, r2, r3
     79c:	7a1b      	ldrb	r3, [r3, #8]
	((Adc *)hw)->WINCTRL.reg = data;
     79e:	7223      	strb	r3, [r4, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     7a0:	7e63      	ldrb	r3, [r4, #25]
     7a2:	09db      	lsrs	r3, r3, #7
     7a4:	d1fc      	bne.n	7a0 <_adc_init+0xac>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     7a6:	00eb      	lsls	r3, r5, #3
     7a8:	1b5b      	subs	r3, r3, r5
     7aa:	009b      	lsls	r3, r3, #2
     7ac:	4a11      	ldr	r2, [pc, #68]	; (7f4 <_adc_init+0x100>)
     7ae:	18d3      	adds	r3, r2, r3
     7b0:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->WINLT.reg = data;
     7b2:	83a3      	strh	r3, [r4, #28]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     7b4:	7e63      	ldrb	r3, [r4, #25]
     7b6:	09db      	lsrs	r3, r3, #7
     7b8:	d1fc      	bne.n	7b4 <_adc_init+0xc0>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     7ba:	00eb      	lsls	r3, r5, #3
     7bc:	1b5b      	subs	r3, r3, r5
     7be:	009b      	lsls	r3, r3, #2
     7c0:	4a0c      	ldr	r2, [pc, #48]	; (7f4 <_adc_init+0x100>)
     7c2:	18d3      	adds	r3, r2, r3
     7c4:	8a9b      	ldrh	r3, [r3, #20]
	((Adc *)hw)->WINUT.reg = data;
     7c6:	8423      	strh	r3, [r4, #32]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     7c8:	7e63      	ldrb	r3, [r4, #25]
     7ca:	09db      	lsrs	r3, r3, #7
     7cc:	d1fc      	bne.n	7c8 <_adc_init+0xd4>
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     7ce:	00eb      	lsls	r3, r5, #3
     7d0:	1b5d      	subs	r5, r3, r5
     7d2:	00ad      	lsls	r5, r5, #2
     7d4:	4b07      	ldr	r3, [pc, #28]	; (7f4 <_adc_init+0x100>)
     7d6:	195d      	adds	r5, r3, r5
     7d8:	786b      	ldrb	r3, [r5, #1]
	((Adc *)hw)->CTRLA.reg = data;
     7da:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
}
     7dc:	2000      	movs	r0, #0
     7de:	bd70      	pop	{r4, r5, r6, pc}
     7e0:	bdffc000 	.word	0xbdffc000
     7e4:	00001f70 	.word	0x00001f70
     7e8:	000006ad 	.word	0x000006ad
     7ec:	00806024 	.word	0x00806024
     7f0:	00806020 	.word	0x00806020
     7f4:	00001f54 	.word	0x00001f54

000007f8 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
     7f8:	b570      	push	{r4, r5, r6, lr}
     7fa:	0005      	movs	r5, r0
     7fc:	000c      	movs	r4, r1
	ASSERT(device);
     7fe:	1e43      	subs	r3, r0, #1
     800:	4198      	sbcs	r0, r3
     802:	b2c0      	uxtb	r0, r0
     804:	22c5      	movs	r2, #197	; 0xc5
     806:	4906      	ldr	r1, [pc, #24]	; (820 <_adc_sync_init+0x28>)
     808:	4b06      	ldr	r3, [pc, #24]	; (824 <_adc_sync_init+0x2c>)
     80a:	4798      	blx	r3

	device->hw = hw;
     80c:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
     80e:	0020      	movs	r0, r4
     810:	4b05      	ldr	r3, [pc, #20]	; (828 <_adc_sync_init+0x30>)
     812:	4798      	blx	r3
     814:	0001      	movs	r1, r0
     816:	0020      	movs	r0, r4
     818:	4b04      	ldr	r3, [pc, #16]	; (82c <_adc_sync_init+0x34>)
     81a:	4798      	blx	r3
}
     81c:	bd70      	pop	{r4, r5, r6, pc}
     81e:	46c0      	nop			; (mov r8, r8)
     820:	00001f70 	.word	0x00001f70
     824:	000006ad 	.word	0x000006ad
     828:	000006f1 	.word	0x000006f1
     82c:	000006f5 	.word	0x000006f5

00000830 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
     830:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
     832:	7813      	ldrb	r3, [r2, #0]
     834:	2102      	movs	r1, #2
     836:	430b      	orrs	r3, r1
     838:	7013      	strb	r3, [r2, #0]
}
     83a:	4770      	bx	lr

0000083c <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
     83c:	6802      	ldr	r2, [r0, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     83e:	7e53      	ldrb	r3, [r2, #25]
     840:	09db      	lsrs	r3, r3, #7
     842:	d1fc      	bne.n	83e <_adc_sync_get_data_size+0x2>
	tmp = ((Adc *)hw)->CTRLB.reg;
     844:	8890      	ldrh	r0, [r2, #4]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
     846:	0680      	lsls	r0, r0, #26
     848:	0f80      	lsrs	r0, r0, #30
     84a:	3803      	subs	r0, #3
     84c:	1e43      	subs	r3, r0, #1
     84e:	4198      	sbcs	r0, r3
     850:	3001      	adds	r0, #1
}
     852:	4770      	bx	lr

00000854 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
     854:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
     856:	7e18      	ldrb	r0, [r3, #24]
     858:	2301      	movs	r3, #1
     85a:	4018      	ands	r0, r3
}
     85c:	4770      	bx	lr

0000085e <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
     85e:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
     860:	7b13      	ldrb	r3, [r2, #12]
     862:	2102      	movs	r1, #2
     864:	430b      	orrs	r3, r1
     866:	7313      	strb	r3, [r2, #12]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     868:	7e53      	ldrb	r3, [r2, #25]
     86a:	09db      	lsrs	r3, r3, #7
     86c:	d1fc      	bne.n	868 <_adc_sync_convert+0xa>
}
     86e:	4770      	bx	lr

00000870 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
     870:	6802      	ldr	r2, [r0, #0]
     872:	7e53      	ldrb	r3, [r2, #25]
     874:	09db      	lsrs	r3, r3, #7
     876:	d1fc      	bne.n	872 <_adc_sync_read_channel_data+0x2>
	return ((Adc *)hw)->RESULT.reg;
     878:	8b50      	ldrh	r0, [r2, #26]
     87a:	b280      	uxth	r0, r0
}
     87c:	4770      	bx	lr

0000087e <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
     87e:	23fa      	movs	r3, #250	; 0xfa
     880:	015b      	lsls	r3, r3, #5
     882:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     884:	4770      	bx	lr
	...

00000888 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     888:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     88a:	4b06      	ldr	r3, [pc, #24]	; (8a4 <_init_chip+0x1c>)
     88c:	685a      	ldr	r2, [r3, #4]
     88e:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     890:	4b05      	ldr	r3, [pc, #20]	; (8a8 <_init_chip+0x20>)
     892:	4798      	blx	r3
	_sysctrl_init_sources();
     894:	4b05      	ldr	r3, [pc, #20]	; (8ac <_init_chip+0x24>)
     896:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     898:	4b05      	ldr	r3, [pc, #20]	; (8b0 <_init_chip+0x28>)
     89a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     89c:	20ff      	movs	r0, #255	; 0xff
     89e:	4b05      	ldr	r3, [pc, #20]	; (8b4 <_init_chip+0x2c>)
     8a0:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     8a2:	bd10      	pop	{r4, pc}
     8a4:	41004000 	.word	0x41004000
     8a8:	000008d9 	.word	0x000008d9
     8ac:	00000a05 	.word	0x00000a05
     8b0:	00000a49 	.word	0x00000a49
     8b4:	000008b9 	.word	0x000008b9

000008b8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     8b8:	07c3      	lsls	r3, r0, #31
     8ba:	d50a      	bpl.n	8d2 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     8bc:	4b05      	ldr	r3, [pc, #20]	; (8d4 <_gclk_init_generators_by_fref+0x1c>)
     8be:	2280      	movs	r2, #128	; 0x80
     8c0:	0052      	lsls	r2, r2, #1
     8c2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     8c4:	2283      	movs	r2, #131	; 0x83
     8c6:	0252      	lsls	r2, r2, #9
     8c8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     8ca:	001a      	movs	r2, r3
     8cc:	7853      	ldrb	r3, [r2, #1]
     8ce:	09db      	lsrs	r3, r3, #7
     8d0:	d1fc      	bne.n	8cc <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     8d2:	4770      	bx	lr
     8d4:	40000c00 	.word	0x40000c00

000008d8 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     8d8:	4b06      	ldr	r3, [pc, #24]	; (8f4 <_pm_init+0x1c>)
     8da:	7a1a      	ldrb	r2, [r3, #8]
     8dc:	b2d2      	uxtb	r2, r2
     8de:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     8e0:	7a5a      	ldrb	r2, [r3, #9]
     8e2:	b2d2      	uxtb	r2, r2
     8e4:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     8e6:	7a9a      	ldrb	r2, [r3, #10]
     8e8:	b2d2      	uxtb	r2, r2
     8ea:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     8ec:	7ada      	ldrb	r2, [r3, #11]
     8ee:	b2d2      	uxtb	r2, r2
     8f0:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     8f2:	4770      	bx	lr
     8f4:	40000400 	.word	0x40000400

000008f8 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     8f8:	b510      	push	{r4, lr}
     8fa:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     8fc:	4b1f      	ldr	r3, [pc, #124]	; (97c <_usart_init+0x84>)
     8fe:	18c3      	adds	r3, r0, r3
     900:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
     902:	b2db      	uxtb	r3, r3
     904:	2b03      	cmp	r3, #3
     906:	d004      	beq.n	912 <_usart_init+0x1a>
	ASSERT(false);
     908:	4a1d      	ldr	r2, [pc, #116]	; (980 <_usart_init+0x88>)
     90a:	491e      	ldr	r1, [pc, #120]	; (984 <_usart_init+0x8c>)
     90c:	2000      	movs	r0, #0
     90e:	4b1e      	ldr	r3, [pc, #120]	; (988 <_usart_init+0x90>)
     910:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     912:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     914:	07db      	lsls	r3, r3, #31
     916:	d418      	bmi.n	94a <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     918:	2203      	movs	r2, #3
     91a:	69e3      	ldr	r3, [r4, #28]
     91c:	421a      	tst	r2, r3
     91e:	d1fc      	bne.n	91a <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     920:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     922:	079b      	lsls	r3, r3, #30
     924:	d50b      	bpl.n	93e <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     926:	6823      	ldr	r3, [r4, #0]
     928:	2202      	movs	r2, #2
     92a:	4393      	bics	r3, r2
     92c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     92e:	3201      	adds	r2, #1
     930:	69e3      	ldr	r3, [r4, #28]
     932:	421a      	tst	r2, r3
     934:	d1fc      	bne.n	930 <_usart_init+0x38>
     936:	2202      	movs	r2, #2
     938:	69e3      	ldr	r3, [r4, #28]
     93a:	421a      	tst	r2, r3
     93c:	d1fc      	bne.n	938 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     93e:	2305      	movs	r3, #5
     940:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     942:	2203      	movs	r2, #3
     944:	69e3      	ldr	r3, [r4, #28]
     946:	421a      	tst	r2, r3
     948:	d1fc      	bne.n	944 <_usart_init+0x4c>
     94a:	2201      	movs	r2, #1
     94c:	69e3      	ldr	r3, [r4, #28]
     94e:	421a      	tst	r2, r3
     950:	d1fc      	bne.n	94c <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     952:	4b0e      	ldr	r3, [pc, #56]	; (98c <_usart_init+0x94>)
     954:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     956:	2203      	movs	r2, #3
     958:	69e3      	ldr	r3, [r4, #28]
     95a:	421a      	tst	r2, r3
     95c:	d1fc      	bne.n	958 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     95e:	23c0      	movs	r3, #192	; 0xc0
     960:	029b      	lsls	r3, r3, #10
     962:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     964:	2207      	movs	r2, #7
     966:	69e3      	ldr	r3, [r4, #28]
     968:	421a      	tst	r2, r3
     96a:	d1fc      	bne.n	966 <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     96c:	4b08      	ldr	r3, [pc, #32]	; (990 <_usart_init+0x98>)
     96e:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     970:	2300      	movs	r3, #0
     972:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     974:	2230      	movs	r2, #48	; 0x30
     976:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
     978:	2000      	movs	r0, #0
     97a:	bd10      	pop	{r4, pc}
     97c:	bdfff800 	.word	0xbdfff800
     980:	0000023a 	.word	0x0000023a
     984:	00001f88 	.word	0x00001f88
     988:	000006ad 	.word	0x000006ad
     98c:	40100004 	.word	0x40100004
     990:	ffffe282 	.word	0xffffe282

00000994 <_usart_sync_init>:
{
     994:	b570      	push	{r4, r5, r6, lr}
     996:	0005      	movs	r5, r0
     998:	000c      	movs	r4, r1
	ASSERT(device);
     99a:	1e43      	subs	r3, r0, #1
     99c:	4198      	sbcs	r0, r3
     99e:	b2c0      	uxtb	r0, r0
     9a0:	22b4      	movs	r2, #180	; 0xb4
     9a2:	4904      	ldr	r1, [pc, #16]	; (9b4 <_usart_sync_init+0x20>)
     9a4:	4b04      	ldr	r3, [pc, #16]	; (9b8 <_usart_sync_init+0x24>)
     9a6:	4798      	blx	r3
	device->hw = hw;
     9a8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     9aa:	0020      	movs	r0, r4
     9ac:	4b03      	ldr	r3, [pc, #12]	; (9bc <_usart_sync_init+0x28>)
     9ae:	4798      	blx	r3
}
     9b0:	bd70      	pop	{r4, r5, r6, pc}
     9b2:	46c0      	nop			; (mov r8, r8)
     9b4:	00001f88 	.word	0x00001f88
     9b8:	000006ad 	.word	0x000006ad
     9bc:	000008f9 	.word	0x000008f9

000009c0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     9c0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     9c2:	6813      	ldr	r3, [r2, #0]
     9c4:	2102      	movs	r1, #2
     9c6:	430b      	orrs	r3, r1
     9c8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     9ca:	3101      	adds	r1, #1
     9cc:	69d3      	ldr	r3, [r2, #28]
     9ce:	4219      	tst	r1, r3
     9d0:	d1fc      	bne.n	9cc <_usart_sync_enable+0xc>
}
     9d2:	4770      	bx	lr

000009d4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     9d4:	6803      	ldr	r3, [r0, #0]
     9d6:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     9d8:	8519      	strh	r1, [r3, #40]	; 0x28
}
     9da:	4770      	bx	lr

000009dc <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     9dc:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     9de:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     9e0:	b2c0      	uxtb	r0, r0
}
     9e2:	4770      	bx	lr

000009e4 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     9e4:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     9e6:	7e18      	ldrb	r0, [r3, #24]
     9e8:	2301      	movs	r3, #1
     9ea:	4018      	ands	r0, r3
}
     9ec:	4770      	bx	lr

000009ee <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     9ee:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     9f0:	7e18      	ldrb	r0, [r3, #24]
     9f2:	0780      	lsls	r0, r0, #30
     9f4:	0fc0      	lsrs	r0, r0, #31
}
     9f6:	4770      	bx	lr

000009f8 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     9f8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     9fa:	7e18      	ldrb	r0, [r3, #24]
     9fc:	0740      	lsls	r0, r0, #29
     9fe:	0fc0      	lsrs	r0, r0, #31
}
     a00:	4770      	bx	lr
	...

00000a04 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     a04:	4b0e      	ldr	r3, [pc, #56]	; (a40 <_sysctrl_init_sources+0x3c>)
     a06:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     a08:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     a0a:	480e      	ldr	r0, [pc, #56]	; (a44 <_sysctrl_init_sources+0x40>)
     a0c:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     a0e:	0f92      	lsrs	r2, r2, #30
     a10:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
     a12:	2002      	movs	r0, #2
     a14:	4302      	orrs	r2, r0
     a16:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     a18:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     a1a:	699a      	ldr	r2, [r3, #24]
     a1c:	4302      	orrs	r2, r0
     a1e:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     a20:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     a22:	211f      	movs	r1, #31
     a24:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     a26:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     a28:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     a2a:	2208      	movs	r2, #8
     a2c:	68cb      	ldr	r3, [r1, #12]
     a2e:	421a      	tst	r2, r3
     a30:	d0fc      	beq.n	a2c <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     a32:	4a03      	ldr	r2, [pc, #12]	; (a40 <_sysctrl_init_sources+0x3c>)
     a34:	6a13      	ldr	r3, [r2, #32]
     a36:	2180      	movs	r1, #128	; 0x80
     a38:	430b      	orrs	r3, r1
     a3a:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     a3c:	4770      	bx	lr
     a3e:	46c0      	nop			; (mov r8, r8)
     a40:	40000800 	.word	0x40000800
     a44:	0fff0000 	.word	0x0fff0000

00000a48 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
     a48:	4a02      	ldr	r2, [pc, #8]	; (a54 <_sysctrl_init_referenced_generators+0xc>)
     a4a:	6993      	ldr	r3, [r2, #24]
     a4c:	2102      	movs	r1, #2
     a4e:	438b      	bics	r3, r1
     a50:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     a52:	4770      	bx	lr
     a54:	40000800 	.word	0x40000800

00000a58 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     a58:	4b02      	ldr	r3, [pc, #8]	; (a64 <_delay_init+0xc>)
     a5a:	4a03      	ldr	r2, [pc, #12]	; (a68 <_delay_init+0x10>)
     a5c:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     a5e:	2205      	movs	r2, #5
     a60:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
     a62:	4770      	bx	lr
     a64:	e000e010 	.word	0xe000e010
     a68:	00ffffff 	.word	0x00ffffff

00000a6c <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
     a6c:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
     a6e:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
     a70:	1e5e      	subs	r6, r3, #1
     a72:	b2f6      	uxtb	r6, r6
     a74:	2b00      	cmp	r3, #0
     a76:	d013      	beq.n	aa0 <_delay_cycles+0x34>
     a78:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
     a7a:	4a0e      	ldr	r2, [pc, #56]	; (ab4 <_delay_cycles+0x48>)
     a7c:	4d0e      	ldr	r5, [pc, #56]	; (ab8 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     a7e:	2080      	movs	r0, #128	; 0x80
     a80:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
     a82:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
     a84:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     a86:	6813      	ldr	r3, [r2, #0]
     a88:	4203      	tst	r3, r0
     a8a:	d0fc      	beq.n	a86 <_delay_cycles+0x1a>
	while (n--) {
     a8c:	3c01      	subs	r4, #1
     a8e:	b2e4      	uxtb	r4, r4
     a90:	2cff      	cmp	r4, #255	; 0xff
     a92:	d1f6      	bne.n	a82 <_delay_cycles+0x16>
     a94:	0633      	lsls	r3, r6, #24
     a96:	1af6      	subs	r6, r6, r3
     a98:	4b08      	ldr	r3, [pc, #32]	; (abc <_delay_cycles+0x50>)
     a9a:	469c      	mov	ip, r3
     a9c:	4461      	add	r1, ip
     a9e:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
     aa0:	4b04      	ldr	r3, [pc, #16]	; (ab4 <_delay_cycles+0x48>)
     aa2:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
     aa4:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     aa6:	0019      	movs	r1, r3
     aa8:	2280      	movs	r2, #128	; 0x80
     aaa:	0252      	lsls	r2, r2, #9
     aac:	680b      	ldr	r3, [r1, #0]
     aae:	4213      	tst	r3, r2
     ab0:	d0fc      	beq.n	aac <_delay_cycles+0x40>
		;
}
     ab2:	bd70      	pop	{r4, r5, r6, pc}
     ab4:	e000e010 	.word	0xe000e010
     ab8:	00ffffff 	.word	0x00ffffff
     abc:	ff000001 	.word	0xff000001

00000ac0 <main>:
#include <atmel_start.h>
#include "adc_read.h"
int main(void)
{
     ac0:	b570      	push	{r4, r5, r6, lr}
     ac2:	b082      	sub	sp, #8
	int ret=0;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     ac4:	4b07      	ldr	r3, [pc, #28]	; (ae4 <main+0x24>)
     ac6:	4798      	blx	r3
	
	uint16_t PA06_ADC_value;
	/* Replace with your application code */
	adc_enable();
     ac8:	4b07      	ldr	r3, [pc, #28]	; (ae8 <main+0x28>)
     aca:	4798      	blx	r3

	while (1) 
	{
	     ADC_ReadTypeDef_t * adc_read;
		ret=ADC_Read(&adc_read);
     acc:	4e07      	ldr	r6, [pc, #28]	; (aec <main+0x2c>)
		
		printf("PA006=%03d\r\n",ret);
     ace:	4d08      	ldr	r5, [pc, #32]	; (af0 <main+0x30>)
     ad0:	4c08      	ldr	r4, [pc, #32]	; (af4 <main+0x34>)
		ret=ADC_Read(&adc_read);
     ad2:	a801      	add	r0, sp, #4
     ad4:	47b0      	blx	r6
     ad6:	0001      	movs	r1, r0
		printf("PA006=%03d\r\n",ret);
     ad8:	0028      	movs	r0, r5
     ada:	47a0      	blx	r4
		delay_ms(250);
     adc:	20fa      	movs	r0, #250	; 0xfa
     ade:	4b06      	ldr	r3, [pc, #24]	; (af8 <main+0x38>)
     ae0:	4798      	blx	r3
     ae2:	e7f6      	b.n	ad2 <main+0x12>
     ae4:	0000014d 	.word	0x0000014d
     ae8:	00000115 	.word	0x00000115
     aec:	00000129 	.word	0x00000129
     af0:	00001fa4 	.word	0x00001fa4
     af4:	00000f25 	.word	0x00000f25
     af8:	000004c9 	.word	0x000004c9

00000afc <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
     afc:	b510      	push	{r4, lr}
     afe:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
     b00:	2800      	cmp	r0, #0
     b02:	d109      	bne.n	b18 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
     b04:	0011      	movs	r1, r2
     b06:	0018      	movs	r0, r3
     b08:	4b05      	ldr	r3, [pc, #20]	; (b20 <_read+0x24>)
     b0a:	4798      	blx	r3
     b0c:	2800      	cmp	r0, #0
     b0e:	db00      	blt.n	b12 <_read+0x16>
	if (n < 0) {
		return -1;
	}

	return n;
}
     b10:	bd10      	pop	{r4, pc}
     b12:	2001      	movs	r0, #1
     b14:	4240      	negs	r0, r0
     b16:	e7fb      	b.n	b10 <_read+0x14>
		return -1;
     b18:	2001      	movs	r0, #1
     b1a:	4240      	negs	r0, r0
     b1c:	e7f8      	b.n	b10 <_read+0x14>
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	00000b79 	.word	0x00000b79

00000b24 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
     b24:	b510      	push	{r4, lr}
     b26:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
     b28:	3801      	subs	r0, #1
     b2a:	2802      	cmp	r0, #2
     b2c:	d809      	bhi.n	b42 <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
     b2e:	0011      	movs	r1, r2
     b30:	0018      	movs	r0, r3
     b32:	4b05      	ldr	r3, [pc, #20]	; (b48 <_write+0x24>)
     b34:	4798      	blx	r3
     b36:	2800      	cmp	r0, #0
     b38:	db00      	blt.n	b3c <_write+0x18>
	if (n < 0) {
		return -1;
	}

	return n;
}
     b3a:	bd10      	pop	{r4, pc}
     b3c:	2001      	movs	r0, #1
     b3e:	4240      	negs	r0, r0
     b40:	e7fb      	b.n	b3a <_write+0x16>
		return -1;
     b42:	2001      	movs	r0, #1
     b44:	4240      	negs	r0, r0
     b46:	e7f8      	b.n	b3a <_write+0x16>
     b48:	00000b9d 	.word	0x00000b9d

00000b4c <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
     b50:	4d06      	ldr	r5, [pc, #24]	; (b6c <stdio_io_init+0x20>)
     b52:	682b      	ldr	r3, [r5, #0]
     b54:	6898      	ldr	r0, [r3, #8]
     b56:	2100      	movs	r1, #0
     b58:	4c05      	ldr	r4, [pc, #20]	; (b70 <stdio_io_init+0x24>)
     b5a:	47a0      	blx	r4
	setbuf(stdin, NULL);
     b5c:	682b      	ldr	r3, [r5, #0]
     b5e:	6858      	ldr	r0, [r3, #4]
     b60:	2100      	movs	r1, #0
     b62:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
     b64:	4b03      	ldr	r3, [pc, #12]	; (b74 <stdio_io_init+0x28>)
     b66:	601e      	str	r6, [r3, #0]
}
     b68:	bd70      	pop	{r4, r5, r6, pc}
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	20000000 	.word	0x20000000
     b70:	00000f59 	.word	0x00000f59
     b74:	20000088 	.word	0x20000088

00000b78 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
     b78:	b510      	push	{r4, lr}
     b7a:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
     b7c:	4b05      	ldr	r3, [pc, #20]	; (b94 <stdio_io_read+0x1c>)
     b7e:	6818      	ldr	r0, [r3, #0]
     b80:	2800      	cmp	r0, #0
     b82:	d004      	beq.n	b8e <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
     b84:	b28a      	uxth	r2, r1
     b86:	0021      	movs	r1, r4
     b88:	4b03      	ldr	r3, [pc, #12]	; (b98 <stdio_io_read+0x20>)
     b8a:	4798      	blx	r3
}
     b8c:	bd10      	pop	{r4, pc}
		return 0;
     b8e:	2000      	movs	r0, #0
     b90:	e7fc      	b.n	b8c <stdio_io_read+0x14>
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	20000088 	.word	0x20000088
     b98:	0000051d 	.word	0x0000051d

00000b9c <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
     b9c:	b510      	push	{r4, lr}
     b9e:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
     ba0:	4b05      	ldr	r3, [pc, #20]	; (bb8 <stdio_io_write+0x1c>)
     ba2:	6818      	ldr	r0, [r3, #0]
     ba4:	2800      	cmp	r0, #0
     ba6:	d004      	beq.n	bb2 <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
     ba8:	b28a      	uxth	r2, r1
     baa:	0021      	movs	r1, r4
     bac:	4b03      	ldr	r3, [pc, #12]	; (bbc <stdio_io_write+0x20>)
     bae:	4798      	blx	r3
}
     bb0:	bd10      	pop	{r4, pc}
		return 0;
     bb2:	2000      	movs	r0, #0
     bb4:	e7fc      	b.n	bb0 <stdio_io_write+0x14>
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	20000088 	.word	0x20000088
     bbc:	000004e9 	.word	0x000004e9

00000bc0 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
     bc0:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
     bc2:	4c04      	ldr	r4, [pc, #16]	; (bd4 <stdio_redirect_init+0x14>)
     bc4:	0020      	movs	r0, r4
     bc6:	4b04      	ldr	r3, [pc, #16]	; (bd8 <stdio_redirect_init+0x18>)
     bc8:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
     bca:	0020      	movs	r0, r4
     bcc:	4b03      	ldr	r3, [pc, #12]	; (bdc <stdio_redirect_init+0x1c>)
     bce:	4798      	blx	r3
}
     bd0:	bd10      	pop	{r4, pc}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	20000094 	.word	0x20000094
     bd8:	00000681 	.word	0x00000681
     bdc:	00000b4d 	.word	0x00000b4d

00000be0 <__udivsi3>:
     be0:	2200      	movs	r2, #0
     be2:	0843      	lsrs	r3, r0, #1
     be4:	428b      	cmp	r3, r1
     be6:	d374      	bcc.n	cd2 <__udivsi3+0xf2>
     be8:	0903      	lsrs	r3, r0, #4
     bea:	428b      	cmp	r3, r1
     bec:	d35f      	bcc.n	cae <__udivsi3+0xce>
     bee:	0a03      	lsrs	r3, r0, #8
     bf0:	428b      	cmp	r3, r1
     bf2:	d344      	bcc.n	c7e <__udivsi3+0x9e>
     bf4:	0b03      	lsrs	r3, r0, #12
     bf6:	428b      	cmp	r3, r1
     bf8:	d328      	bcc.n	c4c <__udivsi3+0x6c>
     bfa:	0c03      	lsrs	r3, r0, #16
     bfc:	428b      	cmp	r3, r1
     bfe:	d30d      	bcc.n	c1c <__udivsi3+0x3c>
     c00:	22ff      	movs	r2, #255	; 0xff
     c02:	0209      	lsls	r1, r1, #8
     c04:	ba12      	rev	r2, r2
     c06:	0c03      	lsrs	r3, r0, #16
     c08:	428b      	cmp	r3, r1
     c0a:	d302      	bcc.n	c12 <__udivsi3+0x32>
     c0c:	1212      	asrs	r2, r2, #8
     c0e:	0209      	lsls	r1, r1, #8
     c10:	d065      	beq.n	cde <__udivsi3+0xfe>
     c12:	0b03      	lsrs	r3, r0, #12
     c14:	428b      	cmp	r3, r1
     c16:	d319      	bcc.n	c4c <__udivsi3+0x6c>
     c18:	e000      	b.n	c1c <__udivsi3+0x3c>
     c1a:	0a09      	lsrs	r1, r1, #8
     c1c:	0bc3      	lsrs	r3, r0, #15
     c1e:	428b      	cmp	r3, r1
     c20:	d301      	bcc.n	c26 <__udivsi3+0x46>
     c22:	03cb      	lsls	r3, r1, #15
     c24:	1ac0      	subs	r0, r0, r3
     c26:	4152      	adcs	r2, r2
     c28:	0b83      	lsrs	r3, r0, #14
     c2a:	428b      	cmp	r3, r1
     c2c:	d301      	bcc.n	c32 <__udivsi3+0x52>
     c2e:	038b      	lsls	r3, r1, #14
     c30:	1ac0      	subs	r0, r0, r3
     c32:	4152      	adcs	r2, r2
     c34:	0b43      	lsrs	r3, r0, #13
     c36:	428b      	cmp	r3, r1
     c38:	d301      	bcc.n	c3e <__udivsi3+0x5e>
     c3a:	034b      	lsls	r3, r1, #13
     c3c:	1ac0      	subs	r0, r0, r3
     c3e:	4152      	adcs	r2, r2
     c40:	0b03      	lsrs	r3, r0, #12
     c42:	428b      	cmp	r3, r1
     c44:	d301      	bcc.n	c4a <__udivsi3+0x6a>
     c46:	030b      	lsls	r3, r1, #12
     c48:	1ac0      	subs	r0, r0, r3
     c4a:	4152      	adcs	r2, r2
     c4c:	0ac3      	lsrs	r3, r0, #11
     c4e:	428b      	cmp	r3, r1
     c50:	d301      	bcc.n	c56 <__udivsi3+0x76>
     c52:	02cb      	lsls	r3, r1, #11
     c54:	1ac0      	subs	r0, r0, r3
     c56:	4152      	adcs	r2, r2
     c58:	0a83      	lsrs	r3, r0, #10
     c5a:	428b      	cmp	r3, r1
     c5c:	d301      	bcc.n	c62 <__udivsi3+0x82>
     c5e:	028b      	lsls	r3, r1, #10
     c60:	1ac0      	subs	r0, r0, r3
     c62:	4152      	adcs	r2, r2
     c64:	0a43      	lsrs	r3, r0, #9
     c66:	428b      	cmp	r3, r1
     c68:	d301      	bcc.n	c6e <__udivsi3+0x8e>
     c6a:	024b      	lsls	r3, r1, #9
     c6c:	1ac0      	subs	r0, r0, r3
     c6e:	4152      	adcs	r2, r2
     c70:	0a03      	lsrs	r3, r0, #8
     c72:	428b      	cmp	r3, r1
     c74:	d301      	bcc.n	c7a <__udivsi3+0x9a>
     c76:	020b      	lsls	r3, r1, #8
     c78:	1ac0      	subs	r0, r0, r3
     c7a:	4152      	adcs	r2, r2
     c7c:	d2cd      	bcs.n	c1a <__udivsi3+0x3a>
     c7e:	09c3      	lsrs	r3, r0, #7
     c80:	428b      	cmp	r3, r1
     c82:	d301      	bcc.n	c88 <__udivsi3+0xa8>
     c84:	01cb      	lsls	r3, r1, #7
     c86:	1ac0      	subs	r0, r0, r3
     c88:	4152      	adcs	r2, r2
     c8a:	0983      	lsrs	r3, r0, #6
     c8c:	428b      	cmp	r3, r1
     c8e:	d301      	bcc.n	c94 <__udivsi3+0xb4>
     c90:	018b      	lsls	r3, r1, #6
     c92:	1ac0      	subs	r0, r0, r3
     c94:	4152      	adcs	r2, r2
     c96:	0943      	lsrs	r3, r0, #5
     c98:	428b      	cmp	r3, r1
     c9a:	d301      	bcc.n	ca0 <__udivsi3+0xc0>
     c9c:	014b      	lsls	r3, r1, #5
     c9e:	1ac0      	subs	r0, r0, r3
     ca0:	4152      	adcs	r2, r2
     ca2:	0903      	lsrs	r3, r0, #4
     ca4:	428b      	cmp	r3, r1
     ca6:	d301      	bcc.n	cac <__udivsi3+0xcc>
     ca8:	010b      	lsls	r3, r1, #4
     caa:	1ac0      	subs	r0, r0, r3
     cac:	4152      	adcs	r2, r2
     cae:	08c3      	lsrs	r3, r0, #3
     cb0:	428b      	cmp	r3, r1
     cb2:	d301      	bcc.n	cb8 <__udivsi3+0xd8>
     cb4:	00cb      	lsls	r3, r1, #3
     cb6:	1ac0      	subs	r0, r0, r3
     cb8:	4152      	adcs	r2, r2
     cba:	0883      	lsrs	r3, r0, #2
     cbc:	428b      	cmp	r3, r1
     cbe:	d301      	bcc.n	cc4 <__udivsi3+0xe4>
     cc0:	008b      	lsls	r3, r1, #2
     cc2:	1ac0      	subs	r0, r0, r3
     cc4:	4152      	adcs	r2, r2
     cc6:	0843      	lsrs	r3, r0, #1
     cc8:	428b      	cmp	r3, r1
     cca:	d301      	bcc.n	cd0 <__udivsi3+0xf0>
     ccc:	004b      	lsls	r3, r1, #1
     cce:	1ac0      	subs	r0, r0, r3
     cd0:	4152      	adcs	r2, r2
     cd2:	1a41      	subs	r1, r0, r1
     cd4:	d200      	bcs.n	cd8 <__udivsi3+0xf8>
     cd6:	4601      	mov	r1, r0
     cd8:	4152      	adcs	r2, r2
     cda:	4610      	mov	r0, r2
     cdc:	4770      	bx	lr
     cde:	e7ff      	b.n	ce0 <__udivsi3+0x100>
     ce0:	b501      	push	{r0, lr}
     ce2:	2000      	movs	r0, #0
     ce4:	f000 f8f0 	bl	ec8 <__aeabi_idiv0>
     ce8:	bd02      	pop	{r1, pc}
     cea:	46c0      	nop			; (mov r8, r8)

00000cec <__aeabi_uidivmod>:
     cec:	2900      	cmp	r1, #0
     cee:	d0f7      	beq.n	ce0 <__udivsi3+0x100>
     cf0:	e776      	b.n	be0 <__udivsi3>
     cf2:	4770      	bx	lr

00000cf4 <__divsi3>:
     cf4:	4603      	mov	r3, r0
     cf6:	430b      	orrs	r3, r1
     cf8:	d47f      	bmi.n	dfa <__divsi3+0x106>
     cfa:	2200      	movs	r2, #0
     cfc:	0843      	lsrs	r3, r0, #1
     cfe:	428b      	cmp	r3, r1
     d00:	d374      	bcc.n	dec <__divsi3+0xf8>
     d02:	0903      	lsrs	r3, r0, #4
     d04:	428b      	cmp	r3, r1
     d06:	d35f      	bcc.n	dc8 <__divsi3+0xd4>
     d08:	0a03      	lsrs	r3, r0, #8
     d0a:	428b      	cmp	r3, r1
     d0c:	d344      	bcc.n	d98 <__divsi3+0xa4>
     d0e:	0b03      	lsrs	r3, r0, #12
     d10:	428b      	cmp	r3, r1
     d12:	d328      	bcc.n	d66 <__divsi3+0x72>
     d14:	0c03      	lsrs	r3, r0, #16
     d16:	428b      	cmp	r3, r1
     d18:	d30d      	bcc.n	d36 <__divsi3+0x42>
     d1a:	22ff      	movs	r2, #255	; 0xff
     d1c:	0209      	lsls	r1, r1, #8
     d1e:	ba12      	rev	r2, r2
     d20:	0c03      	lsrs	r3, r0, #16
     d22:	428b      	cmp	r3, r1
     d24:	d302      	bcc.n	d2c <__divsi3+0x38>
     d26:	1212      	asrs	r2, r2, #8
     d28:	0209      	lsls	r1, r1, #8
     d2a:	d065      	beq.n	df8 <__divsi3+0x104>
     d2c:	0b03      	lsrs	r3, r0, #12
     d2e:	428b      	cmp	r3, r1
     d30:	d319      	bcc.n	d66 <__divsi3+0x72>
     d32:	e000      	b.n	d36 <__divsi3+0x42>
     d34:	0a09      	lsrs	r1, r1, #8
     d36:	0bc3      	lsrs	r3, r0, #15
     d38:	428b      	cmp	r3, r1
     d3a:	d301      	bcc.n	d40 <__divsi3+0x4c>
     d3c:	03cb      	lsls	r3, r1, #15
     d3e:	1ac0      	subs	r0, r0, r3
     d40:	4152      	adcs	r2, r2
     d42:	0b83      	lsrs	r3, r0, #14
     d44:	428b      	cmp	r3, r1
     d46:	d301      	bcc.n	d4c <__divsi3+0x58>
     d48:	038b      	lsls	r3, r1, #14
     d4a:	1ac0      	subs	r0, r0, r3
     d4c:	4152      	adcs	r2, r2
     d4e:	0b43      	lsrs	r3, r0, #13
     d50:	428b      	cmp	r3, r1
     d52:	d301      	bcc.n	d58 <__divsi3+0x64>
     d54:	034b      	lsls	r3, r1, #13
     d56:	1ac0      	subs	r0, r0, r3
     d58:	4152      	adcs	r2, r2
     d5a:	0b03      	lsrs	r3, r0, #12
     d5c:	428b      	cmp	r3, r1
     d5e:	d301      	bcc.n	d64 <__divsi3+0x70>
     d60:	030b      	lsls	r3, r1, #12
     d62:	1ac0      	subs	r0, r0, r3
     d64:	4152      	adcs	r2, r2
     d66:	0ac3      	lsrs	r3, r0, #11
     d68:	428b      	cmp	r3, r1
     d6a:	d301      	bcc.n	d70 <__divsi3+0x7c>
     d6c:	02cb      	lsls	r3, r1, #11
     d6e:	1ac0      	subs	r0, r0, r3
     d70:	4152      	adcs	r2, r2
     d72:	0a83      	lsrs	r3, r0, #10
     d74:	428b      	cmp	r3, r1
     d76:	d301      	bcc.n	d7c <__divsi3+0x88>
     d78:	028b      	lsls	r3, r1, #10
     d7a:	1ac0      	subs	r0, r0, r3
     d7c:	4152      	adcs	r2, r2
     d7e:	0a43      	lsrs	r3, r0, #9
     d80:	428b      	cmp	r3, r1
     d82:	d301      	bcc.n	d88 <__divsi3+0x94>
     d84:	024b      	lsls	r3, r1, #9
     d86:	1ac0      	subs	r0, r0, r3
     d88:	4152      	adcs	r2, r2
     d8a:	0a03      	lsrs	r3, r0, #8
     d8c:	428b      	cmp	r3, r1
     d8e:	d301      	bcc.n	d94 <__divsi3+0xa0>
     d90:	020b      	lsls	r3, r1, #8
     d92:	1ac0      	subs	r0, r0, r3
     d94:	4152      	adcs	r2, r2
     d96:	d2cd      	bcs.n	d34 <__divsi3+0x40>
     d98:	09c3      	lsrs	r3, r0, #7
     d9a:	428b      	cmp	r3, r1
     d9c:	d301      	bcc.n	da2 <__divsi3+0xae>
     d9e:	01cb      	lsls	r3, r1, #7
     da0:	1ac0      	subs	r0, r0, r3
     da2:	4152      	adcs	r2, r2
     da4:	0983      	lsrs	r3, r0, #6
     da6:	428b      	cmp	r3, r1
     da8:	d301      	bcc.n	dae <__divsi3+0xba>
     daa:	018b      	lsls	r3, r1, #6
     dac:	1ac0      	subs	r0, r0, r3
     dae:	4152      	adcs	r2, r2
     db0:	0943      	lsrs	r3, r0, #5
     db2:	428b      	cmp	r3, r1
     db4:	d301      	bcc.n	dba <__divsi3+0xc6>
     db6:	014b      	lsls	r3, r1, #5
     db8:	1ac0      	subs	r0, r0, r3
     dba:	4152      	adcs	r2, r2
     dbc:	0903      	lsrs	r3, r0, #4
     dbe:	428b      	cmp	r3, r1
     dc0:	d301      	bcc.n	dc6 <__divsi3+0xd2>
     dc2:	010b      	lsls	r3, r1, #4
     dc4:	1ac0      	subs	r0, r0, r3
     dc6:	4152      	adcs	r2, r2
     dc8:	08c3      	lsrs	r3, r0, #3
     dca:	428b      	cmp	r3, r1
     dcc:	d301      	bcc.n	dd2 <__divsi3+0xde>
     dce:	00cb      	lsls	r3, r1, #3
     dd0:	1ac0      	subs	r0, r0, r3
     dd2:	4152      	adcs	r2, r2
     dd4:	0883      	lsrs	r3, r0, #2
     dd6:	428b      	cmp	r3, r1
     dd8:	d301      	bcc.n	dde <__divsi3+0xea>
     dda:	008b      	lsls	r3, r1, #2
     ddc:	1ac0      	subs	r0, r0, r3
     dde:	4152      	adcs	r2, r2
     de0:	0843      	lsrs	r3, r0, #1
     de2:	428b      	cmp	r3, r1
     de4:	d301      	bcc.n	dea <__divsi3+0xf6>
     de6:	004b      	lsls	r3, r1, #1
     de8:	1ac0      	subs	r0, r0, r3
     dea:	4152      	adcs	r2, r2
     dec:	1a41      	subs	r1, r0, r1
     dee:	d200      	bcs.n	df2 <__divsi3+0xfe>
     df0:	4601      	mov	r1, r0
     df2:	4152      	adcs	r2, r2
     df4:	4610      	mov	r0, r2
     df6:	4770      	bx	lr
     df8:	e05d      	b.n	eb6 <__divsi3+0x1c2>
     dfa:	0fca      	lsrs	r2, r1, #31
     dfc:	d000      	beq.n	e00 <__divsi3+0x10c>
     dfe:	4249      	negs	r1, r1
     e00:	1003      	asrs	r3, r0, #32
     e02:	d300      	bcc.n	e06 <__divsi3+0x112>
     e04:	4240      	negs	r0, r0
     e06:	4053      	eors	r3, r2
     e08:	2200      	movs	r2, #0
     e0a:	469c      	mov	ip, r3
     e0c:	0903      	lsrs	r3, r0, #4
     e0e:	428b      	cmp	r3, r1
     e10:	d32d      	bcc.n	e6e <__divsi3+0x17a>
     e12:	0a03      	lsrs	r3, r0, #8
     e14:	428b      	cmp	r3, r1
     e16:	d312      	bcc.n	e3e <__divsi3+0x14a>
     e18:	22fc      	movs	r2, #252	; 0xfc
     e1a:	0189      	lsls	r1, r1, #6
     e1c:	ba12      	rev	r2, r2
     e1e:	0a03      	lsrs	r3, r0, #8
     e20:	428b      	cmp	r3, r1
     e22:	d30c      	bcc.n	e3e <__divsi3+0x14a>
     e24:	0189      	lsls	r1, r1, #6
     e26:	1192      	asrs	r2, r2, #6
     e28:	428b      	cmp	r3, r1
     e2a:	d308      	bcc.n	e3e <__divsi3+0x14a>
     e2c:	0189      	lsls	r1, r1, #6
     e2e:	1192      	asrs	r2, r2, #6
     e30:	428b      	cmp	r3, r1
     e32:	d304      	bcc.n	e3e <__divsi3+0x14a>
     e34:	0189      	lsls	r1, r1, #6
     e36:	d03a      	beq.n	eae <__divsi3+0x1ba>
     e38:	1192      	asrs	r2, r2, #6
     e3a:	e000      	b.n	e3e <__divsi3+0x14a>
     e3c:	0989      	lsrs	r1, r1, #6
     e3e:	09c3      	lsrs	r3, r0, #7
     e40:	428b      	cmp	r3, r1
     e42:	d301      	bcc.n	e48 <__divsi3+0x154>
     e44:	01cb      	lsls	r3, r1, #7
     e46:	1ac0      	subs	r0, r0, r3
     e48:	4152      	adcs	r2, r2
     e4a:	0983      	lsrs	r3, r0, #6
     e4c:	428b      	cmp	r3, r1
     e4e:	d301      	bcc.n	e54 <__divsi3+0x160>
     e50:	018b      	lsls	r3, r1, #6
     e52:	1ac0      	subs	r0, r0, r3
     e54:	4152      	adcs	r2, r2
     e56:	0943      	lsrs	r3, r0, #5
     e58:	428b      	cmp	r3, r1
     e5a:	d301      	bcc.n	e60 <__divsi3+0x16c>
     e5c:	014b      	lsls	r3, r1, #5
     e5e:	1ac0      	subs	r0, r0, r3
     e60:	4152      	adcs	r2, r2
     e62:	0903      	lsrs	r3, r0, #4
     e64:	428b      	cmp	r3, r1
     e66:	d301      	bcc.n	e6c <__divsi3+0x178>
     e68:	010b      	lsls	r3, r1, #4
     e6a:	1ac0      	subs	r0, r0, r3
     e6c:	4152      	adcs	r2, r2
     e6e:	08c3      	lsrs	r3, r0, #3
     e70:	428b      	cmp	r3, r1
     e72:	d301      	bcc.n	e78 <__divsi3+0x184>
     e74:	00cb      	lsls	r3, r1, #3
     e76:	1ac0      	subs	r0, r0, r3
     e78:	4152      	adcs	r2, r2
     e7a:	0883      	lsrs	r3, r0, #2
     e7c:	428b      	cmp	r3, r1
     e7e:	d301      	bcc.n	e84 <__divsi3+0x190>
     e80:	008b      	lsls	r3, r1, #2
     e82:	1ac0      	subs	r0, r0, r3
     e84:	4152      	adcs	r2, r2
     e86:	d2d9      	bcs.n	e3c <__divsi3+0x148>
     e88:	0843      	lsrs	r3, r0, #1
     e8a:	428b      	cmp	r3, r1
     e8c:	d301      	bcc.n	e92 <__divsi3+0x19e>
     e8e:	004b      	lsls	r3, r1, #1
     e90:	1ac0      	subs	r0, r0, r3
     e92:	4152      	adcs	r2, r2
     e94:	1a41      	subs	r1, r0, r1
     e96:	d200      	bcs.n	e9a <__divsi3+0x1a6>
     e98:	4601      	mov	r1, r0
     e9a:	4663      	mov	r3, ip
     e9c:	4152      	adcs	r2, r2
     e9e:	105b      	asrs	r3, r3, #1
     ea0:	4610      	mov	r0, r2
     ea2:	d301      	bcc.n	ea8 <__divsi3+0x1b4>
     ea4:	4240      	negs	r0, r0
     ea6:	2b00      	cmp	r3, #0
     ea8:	d500      	bpl.n	eac <__divsi3+0x1b8>
     eaa:	4249      	negs	r1, r1
     eac:	4770      	bx	lr
     eae:	4663      	mov	r3, ip
     eb0:	105b      	asrs	r3, r3, #1
     eb2:	d300      	bcc.n	eb6 <__divsi3+0x1c2>
     eb4:	4240      	negs	r0, r0
     eb6:	b501      	push	{r0, lr}
     eb8:	2000      	movs	r0, #0
     eba:	f000 f805 	bl	ec8 <__aeabi_idiv0>
     ebe:	bd02      	pop	{r1, pc}

00000ec0 <__aeabi_idivmod>:
     ec0:	2900      	cmp	r1, #0
     ec2:	d0f8      	beq.n	eb6 <__divsi3+0x1c2>
     ec4:	e716      	b.n	cf4 <__divsi3>
     ec6:	4770      	bx	lr

00000ec8 <__aeabi_idiv0>:
     ec8:	4770      	bx	lr
     eca:	46c0      	nop			; (mov r8, r8)

00000ecc <__libc_init_array>:
     ecc:	b570      	push	{r4, r5, r6, lr}
     ece:	2600      	movs	r6, #0
     ed0:	4d0c      	ldr	r5, [pc, #48]	; (f04 <__libc_init_array+0x38>)
     ed2:	4c0d      	ldr	r4, [pc, #52]	; (f08 <__libc_init_array+0x3c>)
     ed4:	1b64      	subs	r4, r4, r5
     ed6:	10a4      	asrs	r4, r4, #2
     ed8:	42a6      	cmp	r6, r4
     eda:	d109      	bne.n	ef0 <__libc_init_array+0x24>
     edc:	2600      	movs	r6, #0
     ede:	f001 f8b5 	bl	204c <_init>
     ee2:	4d0a      	ldr	r5, [pc, #40]	; (f0c <__libc_init_array+0x40>)
     ee4:	4c0a      	ldr	r4, [pc, #40]	; (f10 <__libc_init_array+0x44>)
     ee6:	1b64      	subs	r4, r4, r5
     ee8:	10a4      	asrs	r4, r4, #2
     eea:	42a6      	cmp	r6, r4
     eec:	d105      	bne.n	efa <__libc_init_array+0x2e>
     eee:	bd70      	pop	{r4, r5, r6, pc}
     ef0:	00b3      	lsls	r3, r6, #2
     ef2:	58eb      	ldr	r3, [r5, r3]
     ef4:	4798      	blx	r3
     ef6:	3601      	adds	r6, #1
     ef8:	e7ee      	b.n	ed8 <__libc_init_array+0xc>
     efa:	00b3      	lsls	r3, r6, #2
     efc:	58eb      	ldr	r3, [r5, r3]
     efe:	4798      	blx	r3
     f00:	3601      	adds	r6, #1
     f02:	e7f2      	b.n	eea <__libc_init_array+0x1e>
     f04:	00002058 	.word	0x00002058
     f08:	00002058 	.word	0x00002058
     f0c:	00002058 	.word	0x00002058
     f10:	0000205c 	.word	0x0000205c

00000f14 <memset>:
     f14:	0003      	movs	r3, r0
     f16:	1882      	adds	r2, r0, r2
     f18:	4293      	cmp	r3, r2
     f1a:	d100      	bne.n	f1e <memset+0xa>
     f1c:	4770      	bx	lr
     f1e:	7019      	strb	r1, [r3, #0]
     f20:	3301      	adds	r3, #1
     f22:	e7f9      	b.n	f18 <memset+0x4>

00000f24 <iprintf>:
     f24:	b40f      	push	{r0, r1, r2, r3}
     f26:	4b0b      	ldr	r3, [pc, #44]	; (f54 <iprintf+0x30>)
     f28:	b513      	push	{r0, r1, r4, lr}
     f2a:	681c      	ldr	r4, [r3, #0]
     f2c:	2c00      	cmp	r4, #0
     f2e:	d005      	beq.n	f3c <iprintf+0x18>
     f30:	69a3      	ldr	r3, [r4, #24]
     f32:	2b00      	cmp	r3, #0
     f34:	d102      	bne.n	f3c <iprintf+0x18>
     f36:	0020      	movs	r0, r4
     f38:	f000 fa88 	bl	144c <__sinit>
     f3c:	ab05      	add	r3, sp, #20
     f3e:	9a04      	ldr	r2, [sp, #16]
     f40:	68a1      	ldr	r1, [r4, #8]
     f42:	0020      	movs	r0, r4
     f44:	9301      	str	r3, [sp, #4]
     f46:	f000 fc5d 	bl	1804 <_vfiprintf_r>
     f4a:	bc16      	pop	{r1, r2, r4}
     f4c:	bc08      	pop	{r3}
     f4e:	b004      	add	sp, #16
     f50:	4718      	bx	r3
     f52:	46c0      	nop			; (mov r8, r8)
     f54:	20000000 	.word	0x20000000

00000f58 <setbuf>:
     f58:	424a      	negs	r2, r1
     f5a:	414a      	adcs	r2, r1
     f5c:	2380      	movs	r3, #128	; 0x80
     f5e:	b510      	push	{r4, lr}
     f60:	0052      	lsls	r2, r2, #1
     f62:	00db      	lsls	r3, r3, #3
     f64:	f000 f802 	bl	f6c <setvbuf>
     f68:	bd10      	pop	{r4, pc}
	...

00000f6c <setvbuf>:
     f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f6e:	001d      	movs	r5, r3
     f70:	4b4f      	ldr	r3, [pc, #316]	; (10b0 <setvbuf+0x144>)
     f72:	b085      	sub	sp, #20
     f74:	681e      	ldr	r6, [r3, #0]
     f76:	0004      	movs	r4, r0
     f78:	000f      	movs	r7, r1
     f7a:	9200      	str	r2, [sp, #0]
     f7c:	2e00      	cmp	r6, #0
     f7e:	d005      	beq.n	f8c <setvbuf+0x20>
     f80:	69b3      	ldr	r3, [r6, #24]
     f82:	2b00      	cmp	r3, #0
     f84:	d102      	bne.n	f8c <setvbuf+0x20>
     f86:	0030      	movs	r0, r6
     f88:	f000 fa60 	bl	144c <__sinit>
     f8c:	4b49      	ldr	r3, [pc, #292]	; (10b4 <setvbuf+0x148>)
     f8e:	429c      	cmp	r4, r3
     f90:	d150      	bne.n	1034 <setvbuf+0xc8>
     f92:	6874      	ldr	r4, [r6, #4]
     f94:	9b00      	ldr	r3, [sp, #0]
     f96:	2b02      	cmp	r3, #2
     f98:	d005      	beq.n	fa6 <setvbuf+0x3a>
     f9a:	2b01      	cmp	r3, #1
     f9c:	d900      	bls.n	fa0 <setvbuf+0x34>
     f9e:	e084      	b.n	10aa <setvbuf+0x13e>
     fa0:	2d00      	cmp	r5, #0
     fa2:	da00      	bge.n	fa6 <setvbuf+0x3a>
     fa4:	e081      	b.n	10aa <setvbuf+0x13e>
     fa6:	0021      	movs	r1, r4
     fa8:	0030      	movs	r0, r6
     faa:	f000 f9e1 	bl	1370 <_fflush_r>
     fae:	6b61      	ldr	r1, [r4, #52]	; 0x34
     fb0:	2900      	cmp	r1, #0
     fb2:	d008      	beq.n	fc6 <setvbuf+0x5a>
     fb4:	0023      	movs	r3, r4
     fb6:	3344      	adds	r3, #68	; 0x44
     fb8:	4299      	cmp	r1, r3
     fba:	d002      	beq.n	fc2 <setvbuf+0x56>
     fbc:	0030      	movs	r0, r6
     fbe:	f000 fb51 	bl	1664 <_free_r>
     fc2:	2300      	movs	r3, #0
     fc4:	6363      	str	r3, [r4, #52]	; 0x34
     fc6:	2300      	movs	r3, #0
     fc8:	61a3      	str	r3, [r4, #24]
     fca:	6063      	str	r3, [r4, #4]
     fcc:	89a3      	ldrh	r3, [r4, #12]
     fce:	061b      	lsls	r3, r3, #24
     fd0:	d503      	bpl.n	fda <setvbuf+0x6e>
     fd2:	6921      	ldr	r1, [r4, #16]
     fd4:	0030      	movs	r0, r6
     fd6:	f000 fb45 	bl	1664 <_free_r>
     fda:	89a3      	ldrh	r3, [r4, #12]
     fdc:	4a36      	ldr	r2, [pc, #216]	; (10b8 <setvbuf+0x14c>)
     fde:	4013      	ands	r3, r2
     fe0:	81a3      	strh	r3, [r4, #12]
     fe2:	9b00      	ldr	r3, [sp, #0]
     fe4:	2b02      	cmp	r3, #2
     fe6:	d05a      	beq.n	109e <setvbuf+0x132>
     fe8:	ab03      	add	r3, sp, #12
     fea:	aa02      	add	r2, sp, #8
     fec:	0021      	movs	r1, r4
     fee:	0030      	movs	r0, r6
     ff0:	f000 fac2 	bl	1578 <__swhatbuf_r>
     ff4:	89a3      	ldrh	r3, [r4, #12]
     ff6:	4318      	orrs	r0, r3
     ff8:	81a0      	strh	r0, [r4, #12]
     ffa:	2d00      	cmp	r5, #0
     ffc:	d124      	bne.n	1048 <setvbuf+0xdc>
     ffe:	9d02      	ldr	r5, [sp, #8]
    1000:	0028      	movs	r0, r5
    1002:	f000 fb25 	bl	1650 <malloc>
    1006:	9501      	str	r5, [sp, #4]
    1008:	1e07      	subs	r7, r0, #0
    100a:	d142      	bne.n	1092 <setvbuf+0x126>
    100c:	9b02      	ldr	r3, [sp, #8]
    100e:	9301      	str	r3, [sp, #4]
    1010:	42ab      	cmp	r3, r5
    1012:	d139      	bne.n	1088 <setvbuf+0x11c>
    1014:	2001      	movs	r0, #1
    1016:	4240      	negs	r0, r0
    1018:	2302      	movs	r3, #2
    101a:	89a2      	ldrh	r2, [r4, #12]
    101c:	4313      	orrs	r3, r2
    101e:	81a3      	strh	r3, [r4, #12]
    1020:	2300      	movs	r3, #0
    1022:	60a3      	str	r3, [r4, #8]
    1024:	0023      	movs	r3, r4
    1026:	3347      	adds	r3, #71	; 0x47
    1028:	6023      	str	r3, [r4, #0]
    102a:	6123      	str	r3, [r4, #16]
    102c:	2301      	movs	r3, #1
    102e:	6163      	str	r3, [r4, #20]
    1030:	b005      	add	sp, #20
    1032:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1034:	4b21      	ldr	r3, [pc, #132]	; (10bc <setvbuf+0x150>)
    1036:	429c      	cmp	r4, r3
    1038:	d101      	bne.n	103e <setvbuf+0xd2>
    103a:	68b4      	ldr	r4, [r6, #8]
    103c:	e7aa      	b.n	f94 <setvbuf+0x28>
    103e:	4b20      	ldr	r3, [pc, #128]	; (10c0 <setvbuf+0x154>)
    1040:	429c      	cmp	r4, r3
    1042:	d1a7      	bne.n	f94 <setvbuf+0x28>
    1044:	68f4      	ldr	r4, [r6, #12]
    1046:	e7a5      	b.n	f94 <setvbuf+0x28>
    1048:	2f00      	cmp	r7, #0
    104a:	d0d9      	beq.n	1000 <setvbuf+0x94>
    104c:	69b3      	ldr	r3, [r6, #24]
    104e:	2b00      	cmp	r3, #0
    1050:	d102      	bne.n	1058 <setvbuf+0xec>
    1052:	0030      	movs	r0, r6
    1054:	f000 f9fa 	bl	144c <__sinit>
    1058:	9b00      	ldr	r3, [sp, #0]
    105a:	2b01      	cmp	r3, #1
    105c:	d103      	bne.n	1066 <setvbuf+0xfa>
    105e:	89a3      	ldrh	r3, [r4, #12]
    1060:	9a00      	ldr	r2, [sp, #0]
    1062:	431a      	orrs	r2, r3
    1064:	81a2      	strh	r2, [r4, #12]
    1066:	2008      	movs	r0, #8
    1068:	89a3      	ldrh	r3, [r4, #12]
    106a:	6027      	str	r7, [r4, #0]
    106c:	6127      	str	r7, [r4, #16]
    106e:	6165      	str	r5, [r4, #20]
    1070:	4018      	ands	r0, r3
    1072:	d018      	beq.n	10a6 <setvbuf+0x13a>
    1074:	2001      	movs	r0, #1
    1076:	4018      	ands	r0, r3
    1078:	2300      	movs	r3, #0
    107a:	4298      	cmp	r0, r3
    107c:	d011      	beq.n	10a2 <setvbuf+0x136>
    107e:	426d      	negs	r5, r5
    1080:	60a3      	str	r3, [r4, #8]
    1082:	61a5      	str	r5, [r4, #24]
    1084:	0018      	movs	r0, r3
    1086:	e7d3      	b.n	1030 <setvbuf+0xc4>
    1088:	9801      	ldr	r0, [sp, #4]
    108a:	f000 fae1 	bl	1650 <malloc>
    108e:	1e07      	subs	r7, r0, #0
    1090:	d0c0      	beq.n	1014 <setvbuf+0xa8>
    1092:	2380      	movs	r3, #128	; 0x80
    1094:	89a2      	ldrh	r2, [r4, #12]
    1096:	9d01      	ldr	r5, [sp, #4]
    1098:	4313      	orrs	r3, r2
    109a:	81a3      	strh	r3, [r4, #12]
    109c:	e7d6      	b.n	104c <setvbuf+0xe0>
    109e:	2000      	movs	r0, #0
    10a0:	e7ba      	b.n	1018 <setvbuf+0xac>
    10a2:	60a5      	str	r5, [r4, #8]
    10a4:	e7c4      	b.n	1030 <setvbuf+0xc4>
    10a6:	60a0      	str	r0, [r4, #8]
    10a8:	e7c2      	b.n	1030 <setvbuf+0xc4>
    10aa:	2001      	movs	r0, #1
    10ac:	4240      	negs	r0, r0
    10ae:	e7bf      	b.n	1030 <setvbuf+0xc4>
    10b0:	20000000 	.word	0x20000000
    10b4:	00001fd8 	.word	0x00001fd8
    10b8:	fffff35c 	.word	0xfffff35c
    10bc:	00001ff8 	.word	0x00001ff8
    10c0:	00001fb8 	.word	0x00001fb8

000010c4 <__swbuf_r>:
    10c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10c6:	0005      	movs	r5, r0
    10c8:	000e      	movs	r6, r1
    10ca:	0014      	movs	r4, r2
    10cc:	2800      	cmp	r0, #0
    10ce:	d004      	beq.n	10da <__swbuf_r+0x16>
    10d0:	6983      	ldr	r3, [r0, #24]
    10d2:	2b00      	cmp	r3, #0
    10d4:	d101      	bne.n	10da <__swbuf_r+0x16>
    10d6:	f000 f9b9 	bl	144c <__sinit>
    10da:	4b22      	ldr	r3, [pc, #136]	; (1164 <__swbuf_r+0xa0>)
    10dc:	429c      	cmp	r4, r3
    10de:	d12d      	bne.n	113c <__swbuf_r+0x78>
    10e0:	686c      	ldr	r4, [r5, #4]
    10e2:	69a3      	ldr	r3, [r4, #24]
    10e4:	60a3      	str	r3, [r4, #8]
    10e6:	89a3      	ldrh	r3, [r4, #12]
    10e8:	071b      	lsls	r3, r3, #28
    10ea:	d531      	bpl.n	1150 <__swbuf_r+0x8c>
    10ec:	6923      	ldr	r3, [r4, #16]
    10ee:	2b00      	cmp	r3, #0
    10f0:	d02e      	beq.n	1150 <__swbuf_r+0x8c>
    10f2:	6823      	ldr	r3, [r4, #0]
    10f4:	6922      	ldr	r2, [r4, #16]
    10f6:	b2f7      	uxtb	r7, r6
    10f8:	1a98      	subs	r0, r3, r2
    10fa:	6963      	ldr	r3, [r4, #20]
    10fc:	b2f6      	uxtb	r6, r6
    10fe:	4298      	cmp	r0, r3
    1100:	db05      	blt.n	110e <__swbuf_r+0x4a>
    1102:	0021      	movs	r1, r4
    1104:	0028      	movs	r0, r5
    1106:	f000 f933 	bl	1370 <_fflush_r>
    110a:	2800      	cmp	r0, #0
    110c:	d126      	bne.n	115c <__swbuf_r+0x98>
    110e:	68a3      	ldr	r3, [r4, #8]
    1110:	3001      	adds	r0, #1
    1112:	3b01      	subs	r3, #1
    1114:	60a3      	str	r3, [r4, #8]
    1116:	6823      	ldr	r3, [r4, #0]
    1118:	1c5a      	adds	r2, r3, #1
    111a:	6022      	str	r2, [r4, #0]
    111c:	701f      	strb	r7, [r3, #0]
    111e:	6963      	ldr	r3, [r4, #20]
    1120:	4298      	cmp	r0, r3
    1122:	d004      	beq.n	112e <__swbuf_r+0x6a>
    1124:	89a3      	ldrh	r3, [r4, #12]
    1126:	07db      	lsls	r3, r3, #31
    1128:	d51a      	bpl.n	1160 <__swbuf_r+0x9c>
    112a:	2e0a      	cmp	r6, #10
    112c:	d118      	bne.n	1160 <__swbuf_r+0x9c>
    112e:	0021      	movs	r1, r4
    1130:	0028      	movs	r0, r5
    1132:	f000 f91d 	bl	1370 <_fflush_r>
    1136:	2800      	cmp	r0, #0
    1138:	d012      	beq.n	1160 <__swbuf_r+0x9c>
    113a:	e00f      	b.n	115c <__swbuf_r+0x98>
    113c:	4b0a      	ldr	r3, [pc, #40]	; (1168 <__swbuf_r+0xa4>)
    113e:	429c      	cmp	r4, r3
    1140:	d101      	bne.n	1146 <__swbuf_r+0x82>
    1142:	68ac      	ldr	r4, [r5, #8]
    1144:	e7cd      	b.n	10e2 <__swbuf_r+0x1e>
    1146:	4b09      	ldr	r3, [pc, #36]	; (116c <__swbuf_r+0xa8>)
    1148:	429c      	cmp	r4, r3
    114a:	d1ca      	bne.n	10e2 <__swbuf_r+0x1e>
    114c:	68ec      	ldr	r4, [r5, #12]
    114e:	e7c8      	b.n	10e2 <__swbuf_r+0x1e>
    1150:	0021      	movs	r1, r4
    1152:	0028      	movs	r0, r5
    1154:	f000 f80c 	bl	1170 <__swsetup_r>
    1158:	2800      	cmp	r0, #0
    115a:	d0ca      	beq.n	10f2 <__swbuf_r+0x2e>
    115c:	2601      	movs	r6, #1
    115e:	4276      	negs	r6, r6
    1160:	0030      	movs	r0, r6
    1162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1164:	00001fd8 	.word	0x00001fd8
    1168:	00001ff8 	.word	0x00001ff8
    116c:	00001fb8 	.word	0x00001fb8

00001170 <__swsetup_r>:
    1170:	4b36      	ldr	r3, [pc, #216]	; (124c <__swsetup_r+0xdc>)
    1172:	b570      	push	{r4, r5, r6, lr}
    1174:	681d      	ldr	r5, [r3, #0]
    1176:	0006      	movs	r6, r0
    1178:	000c      	movs	r4, r1
    117a:	2d00      	cmp	r5, #0
    117c:	d005      	beq.n	118a <__swsetup_r+0x1a>
    117e:	69ab      	ldr	r3, [r5, #24]
    1180:	2b00      	cmp	r3, #0
    1182:	d102      	bne.n	118a <__swsetup_r+0x1a>
    1184:	0028      	movs	r0, r5
    1186:	f000 f961 	bl	144c <__sinit>
    118a:	4b31      	ldr	r3, [pc, #196]	; (1250 <__swsetup_r+0xe0>)
    118c:	429c      	cmp	r4, r3
    118e:	d10f      	bne.n	11b0 <__swsetup_r+0x40>
    1190:	686c      	ldr	r4, [r5, #4]
    1192:	230c      	movs	r3, #12
    1194:	5ee2      	ldrsh	r2, [r4, r3]
    1196:	b293      	uxth	r3, r2
    1198:	0719      	lsls	r1, r3, #28
    119a:	d42d      	bmi.n	11f8 <__swsetup_r+0x88>
    119c:	06d9      	lsls	r1, r3, #27
    119e:	d411      	bmi.n	11c4 <__swsetup_r+0x54>
    11a0:	2309      	movs	r3, #9
    11a2:	2001      	movs	r0, #1
    11a4:	6033      	str	r3, [r6, #0]
    11a6:	3337      	adds	r3, #55	; 0x37
    11a8:	4313      	orrs	r3, r2
    11aa:	81a3      	strh	r3, [r4, #12]
    11ac:	4240      	negs	r0, r0
    11ae:	bd70      	pop	{r4, r5, r6, pc}
    11b0:	4b28      	ldr	r3, [pc, #160]	; (1254 <__swsetup_r+0xe4>)
    11b2:	429c      	cmp	r4, r3
    11b4:	d101      	bne.n	11ba <__swsetup_r+0x4a>
    11b6:	68ac      	ldr	r4, [r5, #8]
    11b8:	e7eb      	b.n	1192 <__swsetup_r+0x22>
    11ba:	4b27      	ldr	r3, [pc, #156]	; (1258 <__swsetup_r+0xe8>)
    11bc:	429c      	cmp	r4, r3
    11be:	d1e8      	bne.n	1192 <__swsetup_r+0x22>
    11c0:	68ec      	ldr	r4, [r5, #12]
    11c2:	e7e6      	b.n	1192 <__swsetup_r+0x22>
    11c4:	075b      	lsls	r3, r3, #29
    11c6:	d513      	bpl.n	11f0 <__swsetup_r+0x80>
    11c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    11ca:	2900      	cmp	r1, #0
    11cc:	d008      	beq.n	11e0 <__swsetup_r+0x70>
    11ce:	0023      	movs	r3, r4
    11d0:	3344      	adds	r3, #68	; 0x44
    11d2:	4299      	cmp	r1, r3
    11d4:	d002      	beq.n	11dc <__swsetup_r+0x6c>
    11d6:	0030      	movs	r0, r6
    11d8:	f000 fa44 	bl	1664 <_free_r>
    11dc:	2300      	movs	r3, #0
    11de:	6363      	str	r3, [r4, #52]	; 0x34
    11e0:	2224      	movs	r2, #36	; 0x24
    11e2:	89a3      	ldrh	r3, [r4, #12]
    11e4:	4393      	bics	r3, r2
    11e6:	81a3      	strh	r3, [r4, #12]
    11e8:	2300      	movs	r3, #0
    11ea:	6063      	str	r3, [r4, #4]
    11ec:	6923      	ldr	r3, [r4, #16]
    11ee:	6023      	str	r3, [r4, #0]
    11f0:	2308      	movs	r3, #8
    11f2:	89a2      	ldrh	r2, [r4, #12]
    11f4:	4313      	orrs	r3, r2
    11f6:	81a3      	strh	r3, [r4, #12]
    11f8:	6923      	ldr	r3, [r4, #16]
    11fa:	2b00      	cmp	r3, #0
    11fc:	d10b      	bne.n	1216 <__swsetup_r+0xa6>
    11fe:	21a0      	movs	r1, #160	; 0xa0
    1200:	2280      	movs	r2, #128	; 0x80
    1202:	89a3      	ldrh	r3, [r4, #12]
    1204:	0089      	lsls	r1, r1, #2
    1206:	0092      	lsls	r2, r2, #2
    1208:	400b      	ands	r3, r1
    120a:	4293      	cmp	r3, r2
    120c:	d003      	beq.n	1216 <__swsetup_r+0xa6>
    120e:	0021      	movs	r1, r4
    1210:	0030      	movs	r0, r6
    1212:	f000 f9d9 	bl	15c8 <__smakebuf_r>
    1216:	2301      	movs	r3, #1
    1218:	89a2      	ldrh	r2, [r4, #12]
    121a:	4013      	ands	r3, r2
    121c:	d011      	beq.n	1242 <__swsetup_r+0xd2>
    121e:	2300      	movs	r3, #0
    1220:	60a3      	str	r3, [r4, #8]
    1222:	6963      	ldr	r3, [r4, #20]
    1224:	425b      	negs	r3, r3
    1226:	61a3      	str	r3, [r4, #24]
    1228:	2000      	movs	r0, #0
    122a:	6923      	ldr	r3, [r4, #16]
    122c:	4283      	cmp	r3, r0
    122e:	d1be      	bne.n	11ae <__swsetup_r+0x3e>
    1230:	230c      	movs	r3, #12
    1232:	5ee2      	ldrsh	r2, [r4, r3]
    1234:	0613      	lsls	r3, r2, #24
    1236:	d5ba      	bpl.n	11ae <__swsetup_r+0x3e>
    1238:	2340      	movs	r3, #64	; 0x40
    123a:	4313      	orrs	r3, r2
    123c:	81a3      	strh	r3, [r4, #12]
    123e:	3801      	subs	r0, #1
    1240:	e7b5      	b.n	11ae <__swsetup_r+0x3e>
    1242:	0792      	lsls	r2, r2, #30
    1244:	d400      	bmi.n	1248 <__swsetup_r+0xd8>
    1246:	6963      	ldr	r3, [r4, #20]
    1248:	60a3      	str	r3, [r4, #8]
    124a:	e7ed      	b.n	1228 <__swsetup_r+0xb8>
    124c:	20000000 	.word	0x20000000
    1250:	00001fd8 	.word	0x00001fd8
    1254:	00001ff8 	.word	0x00001ff8
    1258:	00001fb8 	.word	0x00001fb8

0000125c <__sflush_r>:
    125c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    125e:	898a      	ldrh	r2, [r1, #12]
    1260:	0005      	movs	r5, r0
    1262:	000c      	movs	r4, r1
    1264:	0713      	lsls	r3, r2, #28
    1266:	d460      	bmi.n	132a <__sflush_r+0xce>
    1268:	684b      	ldr	r3, [r1, #4]
    126a:	2b00      	cmp	r3, #0
    126c:	dc04      	bgt.n	1278 <__sflush_r+0x1c>
    126e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1270:	2b00      	cmp	r3, #0
    1272:	dc01      	bgt.n	1278 <__sflush_r+0x1c>
    1274:	2000      	movs	r0, #0
    1276:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1278:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    127a:	2f00      	cmp	r7, #0
    127c:	d0fa      	beq.n	1274 <__sflush_r+0x18>
    127e:	2300      	movs	r3, #0
    1280:	682e      	ldr	r6, [r5, #0]
    1282:	602b      	str	r3, [r5, #0]
    1284:	2380      	movs	r3, #128	; 0x80
    1286:	015b      	lsls	r3, r3, #5
    1288:	401a      	ands	r2, r3
    128a:	d034      	beq.n	12f6 <__sflush_r+0x9a>
    128c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    128e:	89a3      	ldrh	r3, [r4, #12]
    1290:	075b      	lsls	r3, r3, #29
    1292:	d506      	bpl.n	12a2 <__sflush_r+0x46>
    1294:	6863      	ldr	r3, [r4, #4]
    1296:	1ac0      	subs	r0, r0, r3
    1298:	6b63      	ldr	r3, [r4, #52]	; 0x34
    129a:	2b00      	cmp	r3, #0
    129c:	d001      	beq.n	12a2 <__sflush_r+0x46>
    129e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    12a0:	1ac0      	subs	r0, r0, r3
    12a2:	0002      	movs	r2, r0
    12a4:	6a21      	ldr	r1, [r4, #32]
    12a6:	2300      	movs	r3, #0
    12a8:	0028      	movs	r0, r5
    12aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    12ac:	47b8      	blx	r7
    12ae:	89a1      	ldrh	r1, [r4, #12]
    12b0:	1c43      	adds	r3, r0, #1
    12b2:	d106      	bne.n	12c2 <__sflush_r+0x66>
    12b4:	682b      	ldr	r3, [r5, #0]
    12b6:	2b1d      	cmp	r3, #29
    12b8:	d831      	bhi.n	131e <__sflush_r+0xc2>
    12ba:	4a2c      	ldr	r2, [pc, #176]	; (136c <__sflush_r+0x110>)
    12bc:	40da      	lsrs	r2, r3
    12be:	07d3      	lsls	r3, r2, #31
    12c0:	d52d      	bpl.n	131e <__sflush_r+0xc2>
    12c2:	2300      	movs	r3, #0
    12c4:	6063      	str	r3, [r4, #4]
    12c6:	6923      	ldr	r3, [r4, #16]
    12c8:	6023      	str	r3, [r4, #0]
    12ca:	04cb      	lsls	r3, r1, #19
    12cc:	d505      	bpl.n	12da <__sflush_r+0x7e>
    12ce:	1c43      	adds	r3, r0, #1
    12d0:	d102      	bne.n	12d8 <__sflush_r+0x7c>
    12d2:	682b      	ldr	r3, [r5, #0]
    12d4:	2b00      	cmp	r3, #0
    12d6:	d100      	bne.n	12da <__sflush_r+0x7e>
    12d8:	6560      	str	r0, [r4, #84]	; 0x54
    12da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    12dc:	602e      	str	r6, [r5, #0]
    12de:	2900      	cmp	r1, #0
    12e0:	d0c8      	beq.n	1274 <__sflush_r+0x18>
    12e2:	0023      	movs	r3, r4
    12e4:	3344      	adds	r3, #68	; 0x44
    12e6:	4299      	cmp	r1, r3
    12e8:	d002      	beq.n	12f0 <__sflush_r+0x94>
    12ea:	0028      	movs	r0, r5
    12ec:	f000 f9ba 	bl	1664 <_free_r>
    12f0:	2000      	movs	r0, #0
    12f2:	6360      	str	r0, [r4, #52]	; 0x34
    12f4:	e7bf      	b.n	1276 <__sflush_r+0x1a>
    12f6:	2301      	movs	r3, #1
    12f8:	6a21      	ldr	r1, [r4, #32]
    12fa:	0028      	movs	r0, r5
    12fc:	47b8      	blx	r7
    12fe:	1c43      	adds	r3, r0, #1
    1300:	d1c5      	bne.n	128e <__sflush_r+0x32>
    1302:	682b      	ldr	r3, [r5, #0]
    1304:	2b00      	cmp	r3, #0
    1306:	d0c2      	beq.n	128e <__sflush_r+0x32>
    1308:	2b1d      	cmp	r3, #29
    130a:	d001      	beq.n	1310 <__sflush_r+0xb4>
    130c:	2b16      	cmp	r3, #22
    130e:	d101      	bne.n	1314 <__sflush_r+0xb8>
    1310:	602e      	str	r6, [r5, #0]
    1312:	e7af      	b.n	1274 <__sflush_r+0x18>
    1314:	2340      	movs	r3, #64	; 0x40
    1316:	89a2      	ldrh	r2, [r4, #12]
    1318:	4313      	orrs	r3, r2
    131a:	81a3      	strh	r3, [r4, #12]
    131c:	e7ab      	b.n	1276 <__sflush_r+0x1a>
    131e:	2340      	movs	r3, #64	; 0x40
    1320:	430b      	orrs	r3, r1
    1322:	2001      	movs	r0, #1
    1324:	81a3      	strh	r3, [r4, #12]
    1326:	4240      	negs	r0, r0
    1328:	e7a5      	b.n	1276 <__sflush_r+0x1a>
    132a:	690f      	ldr	r7, [r1, #16]
    132c:	2f00      	cmp	r7, #0
    132e:	d0a1      	beq.n	1274 <__sflush_r+0x18>
    1330:	680b      	ldr	r3, [r1, #0]
    1332:	600f      	str	r7, [r1, #0]
    1334:	1bdb      	subs	r3, r3, r7
    1336:	9301      	str	r3, [sp, #4]
    1338:	2300      	movs	r3, #0
    133a:	0792      	lsls	r2, r2, #30
    133c:	d100      	bne.n	1340 <__sflush_r+0xe4>
    133e:	694b      	ldr	r3, [r1, #20]
    1340:	60a3      	str	r3, [r4, #8]
    1342:	9b01      	ldr	r3, [sp, #4]
    1344:	2b00      	cmp	r3, #0
    1346:	dc00      	bgt.n	134a <__sflush_r+0xee>
    1348:	e794      	b.n	1274 <__sflush_r+0x18>
    134a:	9b01      	ldr	r3, [sp, #4]
    134c:	003a      	movs	r2, r7
    134e:	6a21      	ldr	r1, [r4, #32]
    1350:	0028      	movs	r0, r5
    1352:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1354:	47b0      	blx	r6
    1356:	2800      	cmp	r0, #0
    1358:	dc03      	bgt.n	1362 <__sflush_r+0x106>
    135a:	2340      	movs	r3, #64	; 0x40
    135c:	89a2      	ldrh	r2, [r4, #12]
    135e:	4313      	orrs	r3, r2
    1360:	e7df      	b.n	1322 <__sflush_r+0xc6>
    1362:	9b01      	ldr	r3, [sp, #4]
    1364:	183f      	adds	r7, r7, r0
    1366:	1a1b      	subs	r3, r3, r0
    1368:	9301      	str	r3, [sp, #4]
    136a:	e7ea      	b.n	1342 <__sflush_r+0xe6>
    136c:	20400001 	.word	0x20400001

00001370 <_fflush_r>:
    1370:	690b      	ldr	r3, [r1, #16]
    1372:	b570      	push	{r4, r5, r6, lr}
    1374:	0005      	movs	r5, r0
    1376:	000c      	movs	r4, r1
    1378:	2b00      	cmp	r3, #0
    137a:	d101      	bne.n	1380 <_fflush_r+0x10>
    137c:	2000      	movs	r0, #0
    137e:	bd70      	pop	{r4, r5, r6, pc}
    1380:	2800      	cmp	r0, #0
    1382:	d004      	beq.n	138e <_fflush_r+0x1e>
    1384:	6983      	ldr	r3, [r0, #24]
    1386:	2b00      	cmp	r3, #0
    1388:	d101      	bne.n	138e <_fflush_r+0x1e>
    138a:	f000 f85f 	bl	144c <__sinit>
    138e:	4b0b      	ldr	r3, [pc, #44]	; (13bc <_fflush_r+0x4c>)
    1390:	429c      	cmp	r4, r3
    1392:	d109      	bne.n	13a8 <_fflush_r+0x38>
    1394:	686c      	ldr	r4, [r5, #4]
    1396:	220c      	movs	r2, #12
    1398:	5ea3      	ldrsh	r3, [r4, r2]
    139a:	2b00      	cmp	r3, #0
    139c:	d0ee      	beq.n	137c <_fflush_r+0xc>
    139e:	0021      	movs	r1, r4
    13a0:	0028      	movs	r0, r5
    13a2:	f7ff ff5b 	bl	125c <__sflush_r>
    13a6:	e7ea      	b.n	137e <_fflush_r+0xe>
    13a8:	4b05      	ldr	r3, [pc, #20]	; (13c0 <_fflush_r+0x50>)
    13aa:	429c      	cmp	r4, r3
    13ac:	d101      	bne.n	13b2 <_fflush_r+0x42>
    13ae:	68ac      	ldr	r4, [r5, #8]
    13b0:	e7f1      	b.n	1396 <_fflush_r+0x26>
    13b2:	4b04      	ldr	r3, [pc, #16]	; (13c4 <_fflush_r+0x54>)
    13b4:	429c      	cmp	r4, r3
    13b6:	d1ee      	bne.n	1396 <_fflush_r+0x26>
    13b8:	68ec      	ldr	r4, [r5, #12]
    13ba:	e7ec      	b.n	1396 <_fflush_r+0x26>
    13bc:	00001fd8 	.word	0x00001fd8
    13c0:	00001ff8 	.word	0x00001ff8
    13c4:	00001fb8 	.word	0x00001fb8

000013c8 <_cleanup_r>:
    13c8:	b510      	push	{r4, lr}
    13ca:	4902      	ldr	r1, [pc, #8]	; (13d4 <_cleanup_r+0xc>)
    13cc:	f000 f8b2 	bl	1534 <_fwalk_reent>
    13d0:	bd10      	pop	{r4, pc}
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	00001371 	.word	0x00001371

000013d8 <std.isra.0>:
    13d8:	2300      	movs	r3, #0
    13da:	b510      	push	{r4, lr}
    13dc:	0004      	movs	r4, r0
    13de:	6003      	str	r3, [r0, #0]
    13e0:	6043      	str	r3, [r0, #4]
    13e2:	6083      	str	r3, [r0, #8]
    13e4:	8181      	strh	r1, [r0, #12]
    13e6:	6643      	str	r3, [r0, #100]	; 0x64
    13e8:	81c2      	strh	r2, [r0, #14]
    13ea:	6103      	str	r3, [r0, #16]
    13ec:	6143      	str	r3, [r0, #20]
    13ee:	6183      	str	r3, [r0, #24]
    13f0:	0019      	movs	r1, r3
    13f2:	2208      	movs	r2, #8
    13f4:	305c      	adds	r0, #92	; 0x5c
    13f6:	f7ff fd8d 	bl	f14 <memset>
    13fa:	4b05      	ldr	r3, [pc, #20]	; (1410 <std.isra.0+0x38>)
    13fc:	6224      	str	r4, [r4, #32]
    13fe:	6263      	str	r3, [r4, #36]	; 0x24
    1400:	4b04      	ldr	r3, [pc, #16]	; (1414 <std.isra.0+0x3c>)
    1402:	62a3      	str	r3, [r4, #40]	; 0x28
    1404:	4b04      	ldr	r3, [pc, #16]	; (1418 <std.isra.0+0x40>)
    1406:	62e3      	str	r3, [r4, #44]	; 0x2c
    1408:	4b04      	ldr	r3, [pc, #16]	; (141c <std.isra.0+0x44>)
    140a:	6323      	str	r3, [r4, #48]	; 0x30
    140c:	bd10      	pop	{r4, pc}
    140e:	46c0      	nop			; (mov r8, r8)
    1410:	00001d71 	.word	0x00001d71
    1414:	00001d99 	.word	0x00001d99
    1418:	00001dd1 	.word	0x00001dd1
    141c:	00001dfd 	.word	0x00001dfd

00001420 <__sfmoreglue>:
    1420:	b570      	push	{r4, r5, r6, lr}
    1422:	2568      	movs	r5, #104	; 0x68
    1424:	1e4a      	subs	r2, r1, #1
    1426:	4355      	muls	r5, r2
    1428:	000e      	movs	r6, r1
    142a:	0029      	movs	r1, r5
    142c:	3174      	adds	r1, #116	; 0x74
    142e:	f000 f963 	bl	16f8 <_malloc_r>
    1432:	1e04      	subs	r4, r0, #0
    1434:	d008      	beq.n	1448 <__sfmoreglue+0x28>
    1436:	2100      	movs	r1, #0
    1438:	002a      	movs	r2, r5
    143a:	6001      	str	r1, [r0, #0]
    143c:	6046      	str	r6, [r0, #4]
    143e:	300c      	adds	r0, #12
    1440:	60a0      	str	r0, [r4, #8]
    1442:	3268      	adds	r2, #104	; 0x68
    1444:	f7ff fd66 	bl	f14 <memset>
    1448:	0020      	movs	r0, r4
    144a:	bd70      	pop	{r4, r5, r6, pc}

0000144c <__sinit>:
    144c:	6983      	ldr	r3, [r0, #24]
    144e:	b513      	push	{r0, r1, r4, lr}
    1450:	0004      	movs	r4, r0
    1452:	2b00      	cmp	r3, #0
    1454:	d128      	bne.n	14a8 <__sinit+0x5c>
    1456:	6483      	str	r3, [r0, #72]	; 0x48
    1458:	64c3      	str	r3, [r0, #76]	; 0x4c
    145a:	6503      	str	r3, [r0, #80]	; 0x50
    145c:	4b13      	ldr	r3, [pc, #76]	; (14ac <__sinit+0x60>)
    145e:	4a14      	ldr	r2, [pc, #80]	; (14b0 <__sinit+0x64>)
    1460:	681b      	ldr	r3, [r3, #0]
    1462:	6282      	str	r2, [r0, #40]	; 0x28
    1464:	9301      	str	r3, [sp, #4]
    1466:	4298      	cmp	r0, r3
    1468:	d101      	bne.n	146e <__sinit+0x22>
    146a:	2301      	movs	r3, #1
    146c:	6183      	str	r3, [r0, #24]
    146e:	0020      	movs	r0, r4
    1470:	f000 f820 	bl	14b4 <__sfp>
    1474:	6060      	str	r0, [r4, #4]
    1476:	0020      	movs	r0, r4
    1478:	f000 f81c 	bl	14b4 <__sfp>
    147c:	60a0      	str	r0, [r4, #8]
    147e:	0020      	movs	r0, r4
    1480:	f000 f818 	bl	14b4 <__sfp>
    1484:	2200      	movs	r2, #0
    1486:	60e0      	str	r0, [r4, #12]
    1488:	2104      	movs	r1, #4
    148a:	6860      	ldr	r0, [r4, #4]
    148c:	f7ff ffa4 	bl	13d8 <std.isra.0>
    1490:	2201      	movs	r2, #1
    1492:	2109      	movs	r1, #9
    1494:	68a0      	ldr	r0, [r4, #8]
    1496:	f7ff ff9f 	bl	13d8 <std.isra.0>
    149a:	2202      	movs	r2, #2
    149c:	2112      	movs	r1, #18
    149e:	68e0      	ldr	r0, [r4, #12]
    14a0:	f7ff ff9a 	bl	13d8 <std.isra.0>
    14a4:	2301      	movs	r3, #1
    14a6:	61a3      	str	r3, [r4, #24]
    14a8:	bd13      	pop	{r0, r1, r4, pc}
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	00001fb4 	.word	0x00001fb4
    14b0:	000013c9 	.word	0x000013c9

000014b4 <__sfp>:
    14b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14b6:	4b1e      	ldr	r3, [pc, #120]	; (1530 <__sfp+0x7c>)
    14b8:	0007      	movs	r7, r0
    14ba:	681e      	ldr	r6, [r3, #0]
    14bc:	69b3      	ldr	r3, [r6, #24]
    14be:	2b00      	cmp	r3, #0
    14c0:	d102      	bne.n	14c8 <__sfp+0x14>
    14c2:	0030      	movs	r0, r6
    14c4:	f7ff ffc2 	bl	144c <__sinit>
    14c8:	3648      	adds	r6, #72	; 0x48
    14ca:	68b4      	ldr	r4, [r6, #8]
    14cc:	6873      	ldr	r3, [r6, #4]
    14ce:	3b01      	subs	r3, #1
    14d0:	d504      	bpl.n	14dc <__sfp+0x28>
    14d2:	6833      	ldr	r3, [r6, #0]
    14d4:	2b00      	cmp	r3, #0
    14d6:	d007      	beq.n	14e8 <__sfp+0x34>
    14d8:	6836      	ldr	r6, [r6, #0]
    14da:	e7f6      	b.n	14ca <__sfp+0x16>
    14dc:	220c      	movs	r2, #12
    14de:	5ea5      	ldrsh	r5, [r4, r2]
    14e0:	2d00      	cmp	r5, #0
    14e2:	d00d      	beq.n	1500 <__sfp+0x4c>
    14e4:	3468      	adds	r4, #104	; 0x68
    14e6:	e7f2      	b.n	14ce <__sfp+0x1a>
    14e8:	2104      	movs	r1, #4
    14ea:	0038      	movs	r0, r7
    14ec:	f7ff ff98 	bl	1420 <__sfmoreglue>
    14f0:	6030      	str	r0, [r6, #0]
    14f2:	2800      	cmp	r0, #0
    14f4:	d1f0      	bne.n	14d8 <__sfp+0x24>
    14f6:	230c      	movs	r3, #12
    14f8:	0004      	movs	r4, r0
    14fa:	603b      	str	r3, [r7, #0]
    14fc:	0020      	movs	r0, r4
    14fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1500:	2301      	movs	r3, #1
    1502:	0020      	movs	r0, r4
    1504:	425b      	negs	r3, r3
    1506:	81e3      	strh	r3, [r4, #14]
    1508:	3302      	adds	r3, #2
    150a:	81a3      	strh	r3, [r4, #12]
    150c:	6665      	str	r5, [r4, #100]	; 0x64
    150e:	6025      	str	r5, [r4, #0]
    1510:	60a5      	str	r5, [r4, #8]
    1512:	6065      	str	r5, [r4, #4]
    1514:	6125      	str	r5, [r4, #16]
    1516:	6165      	str	r5, [r4, #20]
    1518:	61a5      	str	r5, [r4, #24]
    151a:	2208      	movs	r2, #8
    151c:	0029      	movs	r1, r5
    151e:	305c      	adds	r0, #92	; 0x5c
    1520:	f7ff fcf8 	bl	f14 <memset>
    1524:	6365      	str	r5, [r4, #52]	; 0x34
    1526:	63a5      	str	r5, [r4, #56]	; 0x38
    1528:	64a5      	str	r5, [r4, #72]	; 0x48
    152a:	64e5      	str	r5, [r4, #76]	; 0x4c
    152c:	e7e6      	b.n	14fc <__sfp+0x48>
    152e:	46c0      	nop			; (mov r8, r8)
    1530:	00001fb4 	.word	0x00001fb4

00001534 <_fwalk_reent>:
    1534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1536:	0004      	movs	r4, r0
    1538:	0007      	movs	r7, r0
    153a:	2600      	movs	r6, #0
    153c:	9101      	str	r1, [sp, #4]
    153e:	3448      	adds	r4, #72	; 0x48
    1540:	2c00      	cmp	r4, #0
    1542:	d101      	bne.n	1548 <_fwalk_reent+0x14>
    1544:	0030      	movs	r0, r6
    1546:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1548:	6863      	ldr	r3, [r4, #4]
    154a:	68a5      	ldr	r5, [r4, #8]
    154c:	9300      	str	r3, [sp, #0]
    154e:	9b00      	ldr	r3, [sp, #0]
    1550:	3b01      	subs	r3, #1
    1552:	9300      	str	r3, [sp, #0]
    1554:	d501      	bpl.n	155a <_fwalk_reent+0x26>
    1556:	6824      	ldr	r4, [r4, #0]
    1558:	e7f2      	b.n	1540 <_fwalk_reent+0xc>
    155a:	89ab      	ldrh	r3, [r5, #12]
    155c:	2b01      	cmp	r3, #1
    155e:	d908      	bls.n	1572 <_fwalk_reent+0x3e>
    1560:	220e      	movs	r2, #14
    1562:	5eab      	ldrsh	r3, [r5, r2]
    1564:	3301      	adds	r3, #1
    1566:	d004      	beq.n	1572 <_fwalk_reent+0x3e>
    1568:	0029      	movs	r1, r5
    156a:	0038      	movs	r0, r7
    156c:	9b01      	ldr	r3, [sp, #4]
    156e:	4798      	blx	r3
    1570:	4306      	orrs	r6, r0
    1572:	3568      	adds	r5, #104	; 0x68
    1574:	e7eb      	b.n	154e <_fwalk_reent+0x1a>
	...

00001578 <__swhatbuf_r>:
    1578:	b570      	push	{r4, r5, r6, lr}
    157a:	000e      	movs	r6, r1
    157c:	001d      	movs	r5, r3
    157e:	230e      	movs	r3, #14
    1580:	5ec9      	ldrsh	r1, [r1, r3]
    1582:	b090      	sub	sp, #64	; 0x40
    1584:	0014      	movs	r4, r2
    1586:	2900      	cmp	r1, #0
    1588:	da07      	bge.n	159a <__swhatbuf_r+0x22>
    158a:	2300      	movs	r3, #0
    158c:	602b      	str	r3, [r5, #0]
    158e:	89b3      	ldrh	r3, [r6, #12]
    1590:	061b      	lsls	r3, r3, #24
    1592:	d411      	bmi.n	15b8 <__swhatbuf_r+0x40>
    1594:	2380      	movs	r3, #128	; 0x80
    1596:	00db      	lsls	r3, r3, #3
    1598:	e00f      	b.n	15ba <__swhatbuf_r+0x42>
    159a:	aa01      	add	r2, sp, #4
    159c:	f000 fc5a 	bl	1e54 <_fstat_r>
    15a0:	2800      	cmp	r0, #0
    15a2:	dbf2      	blt.n	158a <__swhatbuf_r+0x12>
    15a4:	22f0      	movs	r2, #240	; 0xf0
    15a6:	9b02      	ldr	r3, [sp, #8]
    15a8:	0212      	lsls	r2, r2, #8
    15aa:	4013      	ands	r3, r2
    15ac:	4a05      	ldr	r2, [pc, #20]	; (15c4 <__swhatbuf_r+0x4c>)
    15ae:	189b      	adds	r3, r3, r2
    15b0:	425a      	negs	r2, r3
    15b2:	4153      	adcs	r3, r2
    15b4:	602b      	str	r3, [r5, #0]
    15b6:	e7ed      	b.n	1594 <__swhatbuf_r+0x1c>
    15b8:	2340      	movs	r3, #64	; 0x40
    15ba:	2000      	movs	r0, #0
    15bc:	6023      	str	r3, [r4, #0]
    15be:	b010      	add	sp, #64	; 0x40
    15c0:	bd70      	pop	{r4, r5, r6, pc}
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	ffffe000 	.word	0xffffe000

000015c8 <__smakebuf_r>:
    15c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    15ca:	2602      	movs	r6, #2
    15cc:	898b      	ldrh	r3, [r1, #12]
    15ce:	0005      	movs	r5, r0
    15d0:	000c      	movs	r4, r1
    15d2:	4233      	tst	r3, r6
    15d4:	d006      	beq.n	15e4 <__smakebuf_r+0x1c>
    15d6:	0023      	movs	r3, r4
    15d8:	3347      	adds	r3, #71	; 0x47
    15da:	6023      	str	r3, [r4, #0]
    15dc:	6123      	str	r3, [r4, #16]
    15de:	2301      	movs	r3, #1
    15e0:	6163      	str	r3, [r4, #20]
    15e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    15e4:	ab01      	add	r3, sp, #4
    15e6:	466a      	mov	r2, sp
    15e8:	f7ff ffc6 	bl	1578 <__swhatbuf_r>
    15ec:	9900      	ldr	r1, [sp, #0]
    15ee:	0007      	movs	r7, r0
    15f0:	0028      	movs	r0, r5
    15f2:	f000 f881 	bl	16f8 <_malloc_r>
    15f6:	2800      	cmp	r0, #0
    15f8:	d108      	bne.n	160c <__smakebuf_r+0x44>
    15fa:	220c      	movs	r2, #12
    15fc:	5ea3      	ldrsh	r3, [r4, r2]
    15fe:	059a      	lsls	r2, r3, #22
    1600:	d4ef      	bmi.n	15e2 <__smakebuf_r+0x1a>
    1602:	2203      	movs	r2, #3
    1604:	4393      	bics	r3, r2
    1606:	431e      	orrs	r6, r3
    1608:	81a6      	strh	r6, [r4, #12]
    160a:	e7e4      	b.n	15d6 <__smakebuf_r+0xe>
    160c:	4b0f      	ldr	r3, [pc, #60]	; (164c <__smakebuf_r+0x84>)
    160e:	62ab      	str	r3, [r5, #40]	; 0x28
    1610:	2380      	movs	r3, #128	; 0x80
    1612:	89a2      	ldrh	r2, [r4, #12]
    1614:	6020      	str	r0, [r4, #0]
    1616:	4313      	orrs	r3, r2
    1618:	81a3      	strh	r3, [r4, #12]
    161a:	9b00      	ldr	r3, [sp, #0]
    161c:	6120      	str	r0, [r4, #16]
    161e:	6163      	str	r3, [r4, #20]
    1620:	9b01      	ldr	r3, [sp, #4]
    1622:	2b00      	cmp	r3, #0
    1624:	d00d      	beq.n	1642 <__smakebuf_r+0x7a>
    1626:	230e      	movs	r3, #14
    1628:	5ee1      	ldrsh	r1, [r4, r3]
    162a:	0028      	movs	r0, r5
    162c:	f000 fc24 	bl	1e78 <_isatty_r>
    1630:	2800      	cmp	r0, #0
    1632:	d006      	beq.n	1642 <__smakebuf_r+0x7a>
    1634:	2203      	movs	r2, #3
    1636:	89a3      	ldrh	r3, [r4, #12]
    1638:	4393      	bics	r3, r2
    163a:	001a      	movs	r2, r3
    163c:	2301      	movs	r3, #1
    163e:	4313      	orrs	r3, r2
    1640:	81a3      	strh	r3, [r4, #12]
    1642:	89a0      	ldrh	r0, [r4, #12]
    1644:	4338      	orrs	r0, r7
    1646:	81a0      	strh	r0, [r4, #12]
    1648:	e7cb      	b.n	15e2 <__smakebuf_r+0x1a>
    164a:	46c0      	nop			; (mov r8, r8)
    164c:	000013c9 	.word	0x000013c9

00001650 <malloc>:
    1650:	b510      	push	{r4, lr}
    1652:	4b03      	ldr	r3, [pc, #12]	; (1660 <malloc+0x10>)
    1654:	0001      	movs	r1, r0
    1656:	6818      	ldr	r0, [r3, #0]
    1658:	f000 f84e 	bl	16f8 <_malloc_r>
    165c:	bd10      	pop	{r4, pc}
    165e:	46c0      	nop			; (mov r8, r8)
    1660:	20000000 	.word	0x20000000

00001664 <_free_r>:
    1664:	b570      	push	{r4, r5, r6, lr}
    1666:	0005      	movs	r5, r0
    1668:	2900      	cmp	r1, #0
    166a:	d010      	beq.n	168e <_free_r+0x2a>
    166c:	1f0c      	subs	r4, r1, #4
    166e:	6823      	ldr	r3, [r4, #0]
    1670:	2b00      	cmp	r3, #0
    1672:	da00      	bge.n	1676 <_free_r+0x12>
    1674:	18e4      	adds	r4, r4, r3
    1676:	0028      	movs	r0, r5
    1678:	f000 fc2f 	bl	1eda <__malloc_lock>
    167c:	4a1d      	ldr	r2, [pc, #116]	; (16f4 <_free_r+0x90>)
    167e:	6813      	ldr	r3, [r2, #0]
    1680:	2b00      	cmp	r3, #0
    1682:	d105      	bne.n	1690 <_free_r+0x2c>
    1684:	6063      	str	r3, [r4, #4]
    1686:	6014      	str	r4, [r2, #0]
    1688:	0028      	movs	r0, r5
    168a:	f000 fc27 	bl	1edc <__malloc_unlock>
    168e:	bd70      	pop	{r4, r5, r6, pc}
    1690:	42a3      	cmp	r3, r4
    1692:	d909      	bls.n	16a8 <_free_r+0x44>
    1694:	6821      	ldr	r1, [r4, #0]
    1696:	1860      	adds	r0, r4, r1
    1698:	4283      	cmp	r3, r0
    169a:	d1f3      	bne.n	1684 <_free_r+0x20>
    169c:	6818      	ldr	r0, [r3, #0]
    169e:	685b      	ldr	r3, [r3, #4]
    16a0:	1841      	adds	r1, r0, r1
    16a2:	6021      	str	r1, [r4, #0]
    16a4:	e7ee      	b.n	1684 <_free_r+0x20>
    16a6:	0013      	movs	r3, r2
    16a8:	685a      	ldr	r2, [r3, #4]
    16aa:	2a00      	cmp	r2, #0
    16ac:	d001      	beq.n	16b2 <_free_r+0x4e>
    16ae:	42a2      	cmp	r2, r4
    16b0:	d9f9      	bls.n	16a6 <_free_r+0x42>
    16b2:	6819      	ldr	r1, [r3, #0]
    16b4:	1858      	adds	r0, r3, r1
    16b6:	42a0      	cmp	r0, r4
    16b8:	d10b      	bne.n	16d2 <_free_r+0x6e>
    16ba:	6820      	ldr	r0, [r4, #0]
    16bc:	1809      	adds	r1, r1, r0
    16be:	1858      	adds	r0, r3, r1
    16c0:	6019      	str	r1, [r3, #0]
    16c2:	4282      	cmp	r2, r0
    16c4:	d1e0      	bne.n	1688 <_free_r+0x24>
    16c6:	6810      	ldr	r0, [r2, #0]
    16c8:	6852      	ldr	r2, [r2, #4]
    16ca:	1841      	adds	r1, r0, r1
    16cc:	6019      	str	r1, [r3, #0]
    16ce:	605a      	str	r2, [r3, #4]
    16d0:	e7da      	b.n	1688 <_free_r+0x24>
    16d2:	42a0      	cmp	r0, r4
    16d4:	d902      	bls.n	16dc <_free_r+0x78>
    16d6:	230c      	movs	r3, #12
    16d8:	602b      	str	r3, [r5, #0]
    16da:	e7d5      	b.n	1688 <_free_r+0x24>
    16dc:	6821      	ldr	r1, [r4, #0]
    16de:	1860      	adds	r0, r4, r1
    16e0:	4282      	cmp	r2, r0
    16e2:	d103      	bne.n	16ec <_free_r+0x88>
    16e4:	6810      	ldr	r0, [r2, #0]
    16e6:	6852      	ldr	r2, [r2, #4]
    16e8:	1841      	adds	r1, r0, r1
    16ea:	6021      	str	r1, [r4, #0]
    16ec:	6062      	str	r2, [r4, #4]
    16ee:	605c      	str	r4, [r3, #4]
    16f0:	e7ca      	b.n	1688 <_free_r+0x24>
    16f2:	46c0      	nop			; (mov r8, r8)
    16f4:	2000008c 	.word	0x2000008c

000016f8 <_malloc_r>:
    16f8:	2303      	movs	r3, #3
    16fa:	b570      	push	{r4, r5, r6, lr}
    16fc:	1ccd      	adds	r5, r1, #3
    16fe:	439d      	bics	r5, r3
    1700:	3508      	adds	r5, #8
    1702:	0006      	movs	r6, r0
    1704:	2d0c      	cmp	r5, #12
    1706:	d21e      	bcs.n	1746 <_malloc_r+0x4e>
    1708:	250c      	movs	r5, #12
    170a:	42a9      	cmp	r1, r5
    170c:	d81d      	bhi.n	174a <_malloc_r+0x52>
    170e:	0030      	movs	r0, r6
    1710:	f000 fbe3 	bl	1eda <__malloc_lock>
    1714:	4a25      	ldr	r2, [pc, #148]	; (17ac <_malloc_r+0xb4>)
    1716:	6814      	ldr	r4, [r2, #0]
    1718:	0021      	movs	r1, r4
    171a:	2900      	cmp	r1, #0
    171c:	d119      	bne.n	1752 <_malloc_r+0x5a>
    171e:	4c24      	ldr	r4, [pc, #144]	; (17b0 <_malloc_r+0xb8>)
    1720:	6823      	ldr	r3, [r4, #0]
    1722:	2b00      	cmp	r3, #0
    1724:	d103      	bne.n	172e <_malloc_r+0x36>
    1726:	0030      	movs	r0, r6
    1728:	f000 fb10 	bl	1d4c <_sbrk_r>
    172c:	6020      	str	r0, [r4, #0]
    172e:	0029      	movs	r1, r5
    1730:	0030      	movs	r0, r6
    1732:	f000 fb0b 	bl	1d4c <_sbrk_r>
    1736:	1c43      	adds	r3, r0, #1
    1738:	d12c      	bne.n	1794 <_malloc_r+0x9c>
    173a:	230c      	movs	r3, #12
    173c:	0030      	movs	r0, r6
    173e:	6033      	str	r3, [r6, #0]
    1740:	f000 fbcc 	bl	1edc <__malloc_unlock>
    1744:	e003      	b.n	174e <_malloc_r+0x56>
    1746:	2d00      	cmp	r5, #0
    1748:	dadf      	bge.n	170a <_malloc_r+0x12>
    174a:	230c      	movs	r3, #12
    174c:	6033      	str	r3, [r6, #0]
    174e:	2000      	movs	r0, #0
    1750:	bd70      	pop	{r4, r5, r6, pc}
    1752:	680b      	ldr	r3, [r1, #0]
    1754:	1b5b      	subs	r3, r3, r5
    1756:	d41a      	bmi.n	178e <_malloc_r+0x96>
    1758:	2b0b      	cmp	r3, #11
    175a:	d903      	bls.n	1764 <_malloc_r+0x6c>
    175c:	600b      	str	r3, [r1, #0]
    175e:	18cc      	adds	r4, r1, r3
    1760:	6025      	str	r5, [r4, #0]
    1762:	e003      	b.n	176c <_malloc_r+0x74>
    1764:	428c      	cmp	r4, r1
    1766:	d10e      	bne.n	1786 <_malloc_r+0x8e>
    1768:	6863      	ldr	r3, [r4, #4]
    176a:	6013      	str	r3, [r2, #0]
    176c:	0030      	movs	r0, r6
    176e:	f000 fbb5 	bl	1edc <__malloc_unlock>
    1772:	0020      	movs	r0, r4
    1774:	2207      	movs	r2, #7
    1776:	300b      	adds	r0, #11
    1778:	1d23      	adds	r3, r4, #4
    177a:	4390      	bics	r0, r2
    177c:	1ac3      	subs	r3, r0, r3
    177e:	d0e7      	beq.n	1750 <_malloc_r+0x58>
    1780:	425a      	negs	r2, r3
    1782:	50e2      	str	r2, [r4, r3]
    1784:	e7e4      	b.n	1750 <_malloc_r+0x58>
    1786:	684b      	ldr	r3, [r1, #4]
    1788:	6063      	str	r3, [r4, #4]
    178a:	000c      	movs	r4, r1
    178c:	e7ee      	b.n	176c <_malloc_r+0x74>
    178e:	000c      	movs	r4, r1
    1790:	6849      	ldr	r1, [r1, #4]
    1792:	e7c2      	b.n	171a <_malloc_r+0x22>
    1794:	2303      	movs	r3, #3
    1796:	1cc4      	adds	r4, r0, #3
    1798:	439c      	bics	r4, r3
    179a:	42a0      	cmp	r0, r4
    179c:	d0e0      	beq.n	1760 <_malloc_r+0x68>
    179e:	1a21      	subs	r1, r4, r0
    17a0:	0030      	movs	r0, r6
    17a2:	f000 fad3 	bl	1d4c <_sbrk_r>
    17a6:	1c43      	adds	r3, r0, #1
    17a8:	d1da      	bne.n	1760 <_malloc_r+0x68>
    17aa:	e7c6      	b.n	173a <_malloc_r+0x42>
    17ac:	2000008c 	.word	0x2000008c
    17b0:	20000090 	.word	0x20000090

000017b4 <__sfputc_r>:
    17b4:	6893      	ldr	r3, [r2, #8]
    17b6:	b510      	push	{r4, lr}
    17b8:	3b01      	subs	r3, #1
    17ba:	6093      	str	r3, [r2, #8]
    17bc:	2b00      	cmp	r3, #0
    17be:	da05      	bge.n	17cc <__sfputc_r+0x18>
    17c0:	6994      	ldr	r4, [r2, #24]
    17c2:	42a3      	cmp	r3, r4
    17c4:	db08      	blt.n	17d8 <__sfputc_r+0x24>
    17c6:	b2cb      	uxtb	r3, r1
    17c8:	2b0a      	cmp	r3, #10
    17ca:	d005      	beq.n	17d8 <__sfputc_r+0x24>
    17cc:	6813      	ldr	r3, [r2, #0]
    17ce:	1c58      	adds	r0, r3, #1
    17d0:	6010      	str	r0, [r2, #0]
    17d2:	7019      	strb	r1, [r3, #0]
    17d4:	b2c8      	uxtb	r0, r1
    17d6:	bd10      	pop	{r4, pc}
    17d8:	f7ff fc74 	bl	10c4 <__swbuf_r>
    17dc:	e7fb      	b.n	17d6 <__sfputc_r+0x22>

000017de <__sfputs_r>:
    17de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17e0:	0006      	movs	r6, r0
    17e2:	000f      	movs	r7, r1
    17e4:	0014      	movs	r4, r2
    17e6:	18d5      	adds	r5, r2, r3
    17e8:	42ac      	cmp	r4, r5
    17ea:	d101      	bne.n	17f0 <__sfputs_r+0x12>
    17ec:	2000      	movs	r0, #0
    17ee:	e007      	b.n	1800 <__sfputs_r+0x22>
    17f0:	7821      	ldrb	r1, [r4, #0]
    17f2:	003a      	movs	r2, r7
    17f4:	0030      	movs	r0, r6
    17f6:	f7ff ffdd 	bl	17b4 <__sfputc_r>
    17fa:	3401      	adds	r4, #1
    17fc:	1c43      	adds	r3, r0, #1
    17fe:	d1f3      	bne.n	17e8 <__sfputs_r+0xa>
    1800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001804 <_vfiprintf_r>:
    1804:	b5f0      	push	{r4, r5, r6, r7, lr}
    1806:	b09f      	sub	sp, #124	; 0x7c
    1808:	0006      	movs	r6, r0
    180a:	000f      	movs	r7, r1
    180c:	0014      	movs	r4, r2
    180e:	9305      	str	r3, [sp, #20]
    1810:	2800      	cmp	r0, #0
    1812:	d004      	beq.n	181e <_vfiprintf_r+0x1a>
    1814:	6983      	ldr	r3, [r0, #24]
    1816:	2b00      	cmp	r3, #0
    1818:	d101      	bne.n	181e <_vfiprintf_r+0x1a>
    181a:	f7ff fe17 	bl	144c <__sinit>
    181e:	4b7f      	ldr	r3, [pc, #508]	; (1a1c <_vfiprintf_r+0x218>)
    1820:	429f      	cmp	r7, r3
    1822:	d15c      	bne.n	18de <_vfiprintf_r+0xda>
    1824:	6877      	ldr	r7, [r6, #4]
    1826:	89bb      	ldrh	r3, [r7, #12]
    1828:	071b      	lsls	r3, r3, #28
    182a:	d562      	bpl.n	18f2 <_vfiprintf_r+0xee>
    182c:	693b      	ldr	r3, [r7, #16]
    182e:	2b00      	cmp	r3, #0
    1830:	d05f      	beq.n	18f2 <_vfiprintf_r+0xee>
    1832:	2300      	movs	r3, #0
    1834:	ad06      	add	r5, sp, #24
    1836:	616b      	str	r3, [r5, #20]
    1838:	3320      	adds	r3, #32
    183a:	766b      	strb	r3, [r5, #25]
    183c:	3310      	adds	r3, #16
    183e:	76ab      	strb	r3, [r5, #26]
    1840:	9402      	str	r4, [sp, #8]
    1842:	9c02      	ldr	r4, [sp, #8]
    1844:	7823      	ldrb	r3, [r4, #0]
    1846:	2b00      	cmp	r3, #0
    1848:	d15d      	bne.n	1906 <_vfiprintf_r+0x102>
    184a:	9b02      	ldr	r3, [sp, #8]
    184c:	1ae3      	subs	r3, r4, r3
    184e:	9304      	str	r3, [sp, #16]
    1850:	d00d      	beq.n	186e <_vfiprintf_r+0x6a>
    1852:	9b04      	ldr	r3, [sp, #16]
    1854:	9a02      	ldr	r2, [sp, #8]
    1856:	0039      	movs	r1, r7
    1858:	0030      	movs	r0, r6
    185a:	f7ff ffc0 	bl	17de <__sfputs_r>
    185e:	1c43      	adds	r3, r0, #1
    1860:	d100      	bne.n	1864 <_vfiprintf_r+0x60>
    1862:	e0cc      	b.n	19fe <_vfiprintf_r+0x1fa>
    1864:	696a      	ldr	r2, [r5, #20]
    1866:	9b04      	ldr	r3, [sp, #16]
    1868:	4694      	mov	ip, r2
    186a:	4463      	add	r3, ip
    186c:	616b      	str	r3, [r5, #20]
    186e:	7823      	ldrb	r3, [r4, #0]
    1870:	2b00      	cmp	r3, #0
    1872:	d100      	bne.n	1876 <_vfiprintf_r+0x72>
    1874:	e0c3      	b.n	19fe <_vfiprintf_r+0x1fa>
    1876:	2201      	movs	r2, #1
    1878:	2300      	movs	r3, #0
    187a:	4252      	negs	r2, r2
    187c:	606a      	str	r2, [r5, #4]
    187e:	a902      	add	r1, sp, #8
    1880:	3254      	adds	r2, #84	; 0x54
    1882:	1852      	adds	r2, r2, r1
    1884:	3401      	adds	r4, #1
    1886:	602b      	str	r3, [r5, #0]
    1888:	60eb      	str	r3, [r5, #12]
    188a:	60ab      	str	r3, [r5, #8]
    188c:	7013      	strb	r3, [r2, #0]
    188e:	65ab      	str	r3, [r5, #88]	; 0x58
    1890:	7821      	ldrb	r1, [r4, #0]
    1892:	2205      	movs	r2, #5
    1894:	4862      	ldr	r0, [pc, #392]	; (1a20 <_vfiprintf_r+0x21c>)
    1896:	f000 fb15 	bl	1ec4 <memchr>
    189a:	1c63      	adds	r3, r4, #1
    189c:	469c      	mov	ip, r3
    189e:	2800      	cmp	r0, #0
    18a0:	d135      	bne.n	190e <_vfiprintf_r+0x10a>
    18a2:	6829      	ldr	r1, [r5, #0]
    18a4:	06cb      	lsls	r3, r1, #27
    18a6:	d504      	bpl.n	18b2 <_vfiprintf_r+0xae>
    18a8:	2353      	movs	r3, #83	; 0x53
    18aa:	aa02      	add	r2, sp, #8
    18ac:	3020      	adds	r0, #32
    18ae:	189b      	adds	r3, r3, r2
    18b0:	7018      	strb	r0, [r3, #0]
    18b2:	070b      	lsls	r3, r1, #28
    18b4:	d504      	bpl.n	18c0 <_vfiprintf_r+0xbc>
    18b6:	2353      	movs	r3, #83	; 0x53
    18b8:	202b      	movs	r0, #43	; 0x2b
    18ba:	aa02      	add	r2, sp, #8
    18bc:	189b      	adds	r3, r3, r2
    18be:	7018      	strb	r0, [r3, #0]
    18c0:	7823      	ldrb	r3, [r4, #0]
    18c2:	2b2a      	cmp	r3, #42	; 0x2a
    18c4:	d02c      	beq.n	1920 <_vfiprintf_r+0x11c>
    18c6:	2000      	movs	r0, #0
    18c8:	210a      	movs	r1, #10
    18ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18cc:	7822      	ldrb	r2, [r4, #0]
    18ce:	3a30      	subs	r2, #48	; 0x30
    18d0:	2a09      	cmp	r2, #9
    18d2:	d800      	bhi.n	18d6 <_vfiprintf_r+0xd2>
    18d4:	e06b      	b.n	19ae <_vfiprintf_r+0x1aa>
    18d6:	2800      	cmp	r0, #0
    18d8:	d02a      	beq.n	1930 <_vfiprintf_r+0x12c>
    18da:	9309      	str	r3, [sp, #36]	; 0x24
    18dc:	e028      	b.n	1930 <_vfiprintf_r+0x12c>
    18de:	4b51      	ldr	r3, [pc, #324]	; (1a24 <_vfiprintf_r+0x220>)
    18e0:	429f      	cmp	r7, r3
    18e2:	d101      	bne.n	18e8 <_vfiprintf_r+0xe4>
    18e4:	68b7      	ldr	r7, [r6, #8]
    18e6:	e79e      	b.n	1826 <_vfiprintf_r+0x22>
    18e8:	4b4f      	ldr	r3, [pc, #316]	; (1a28 <_vfiprintf_r+0x224>)
    18ea:	429f      	cmp	r7, r3
    18ec:	d19b      	bne.n	1826 <_vfiprintf_r+0x22>
    18ee:	68f7      	ldr	r7, [r6, #12]
    18f0:	e799      	b.n	1826 <_vfiprintf_r+0x22>
    18f2:	0039      	movs	r1, r7
    18f4:	0030      	movs	r0, r6
    18f6:	f7ff fc3b 	bl	1170 <__swsetup_r>
    18fa:	2800      	cmp	r0, #0
    18fc:	d099      	beq.n	1832 <_vfiprintf_r+0x2e>
    18fe:	2001      	movs	r0, #1
    1900:	4240      	negs	r0, r0
    1902:	b01f      	add	sp, #124	; 0x7c
    1904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1906:	2b25      	cmp	r3, #37	; 0x25
    1908:	d09f      	beq.n	184a <_vfiprintf_r+0x46>
    190a:	3401      	adds	r4, #1
    190c:	e79a      	b.n	1844 <_vfiprintf_r+0x40>
    190e:	4b44      	ldr	r3, [pc, #272]	; (1a20 <_vfiprintf_r+0x21c>)
    1910:	6829      	ldr	r1, [r5, #0]
    1912:	1ac0      	subs	r0, r0, r3
    1914:	2301      	movs	r3, #1
    1916:	4083      	lsls	r3, r0
    1918:	430b      	orrs	r3, r1
    191a:	602b      	str	r3, [r5, #0]
    191c:	4664      	mov	r4, ip
    191e:	e7b7      	b.n	1890 <_vfiprintf_r+0x8c>
    1920:	9b05      	ldr	r3, [sp, #20]
    1922:	1d18      	adds	r0, r3, #4
    1924:	681b      	ldr	r3, [r3, #0]
    1926:	9005      	str	r0, [sp, #20]
    1928:	2b00      	cmp	r3, #0
    192a:	db3a      	blt.n	19a2 <_vfiprintf_r+0x19e>
    192c:	9309      	str	r3, [sp, #36]	; 0x24
    192e:	4664      	mov	r4, ip
    1930:	7823      	ldrb	r3, [r4, #0]
    1932:	2b2e      	cmp	r3, #46	; 0x2e
    1934:	d10b      	bne.n	194e <_vfiprintf_r+0x14a>
    1936:	7863      	ldrb	r3, [r4, #1]
    1938:	1c62      	adds	r2, r4, #1
    193a:	2b2a      	cmp	r3, #42	; 0x2a
    193c:	d13f      	bne.n	19be <_vfiprintf_r+0x1ba>
    193e:	9b05      	ldr	r3, [sp, #20]
    1940:	3402      	adds	r4, #2
    1942:	1d1a      	adds	r2, r3, #4
    1944:	681b      	ldr	r3, [r3, #0]
    1946:	9205      	str	r2, [sp, #20]
    1948:	2b00      	cmp	r3, #0
    194a:	db35      	blt.n	19b8 <_vfiprintf_r+0x1b4>
    194c:	9307      	str	r3, [sp, #28]
    194e:	7821      	ldrb	r1, [r4, #0]
    1950:	2203      	movs	r2, #3
    1952:	4836      	ldr	r0, [pc, #216]	; (1a2c <_vfiprintf_r+0x228>)
    1954:	f000 fab6 	bl	1ec4 <memchr>
    1958:	2800      	cmp	r0, #0
    195a:	d007      	beq.n	196c <_vfiprintf_r+0x168>
    195c:	4b33      	ldr	r3, [pc, #204]	; (1a2c <_vfiprintf_r+0x228>)
    195e:	682a      	ldr	r2, [r5, #0]
    1960:	1ac0      	subs	r0, r0, r3
    1962:	2340      	movs	r3, #64	; 0x40
    1964:	4083      	lsls	r3, r0
    1966:	4313      	orrs	r3, r2
    1968:	602b      	str	r3, [r5, #0]
    196a:	3401      	adds	r4, #1
    196c:	7821      	ldrb	r1, [r4, #0]
    196e:	1c63      	adds	r3, r4, #1
    1970:	2206      	movs	r2, #6
    1972:	482f      	ldr	r0, [pc, #188]	; (1a30 <_vfiprintf_r+0x22c>)
    1974:	9302      	str	r3, [sp, #8]
    1976:	7629      	strb	r1, [r5, #24]
    1978:	f000 faa4 	bl	1ec4 <memchr>
    197c:	2800      	cmp	r0, #0
    197e:	d044      	beq.n	1a0a <_vfiprintf_r+0x206>
    1980:	4b2c      	ldr	r3, [pc, #176]	; (1a34 <_vfiprintf_r+0x230>)
    1982:	2b00      	cmp	r3, #0
    1984:	d12f      	bne.n	19e6 <_vfiprintf_r+0x1e2>
    1986:	6829      	ldr	r1, [r5, #0]
    1988:	9b05      	ldr	r3, [sp, #20]
    198a:	2207      	movs	r2, #7
    198c:	05c9      	lsls	r1, r1, #23
    198e:	d528      	bpl.n	19e2 <_vfiprintf_r+0x1de>
    1990:	189b      	adds	r3, r3, r2
    1992:	4393      	bics	r3, r2
    1994:	3308      	adds	r3, #8
    1996:	9305      	str	r3, [sp, #20]
    1998:	696b      	ldr	r3, [r5, #20]
    199a:	9a03      	ldr	r2, [sp, #12]
    199c:	189b      	adds	r3, r3, r2
    199e:	616b      	str	r3, [r5, #20]
    19a0:	e74f      	b.n	1842 <_vfiprintf_r+0x3e>
    19a2:	425b      	negs	r3, r3
    19a4:	60eb      	str	r3, [r5, #12]
    19a6:	2302      	movs	r3, #2
    19a8:	430b      	orrs	r3, r1
    19aa:	602b      	str	r3, [r5, #0]
    19ac:	e7bf      	b.n	192e <_vfiprintf_r+0x12a>
    19ae:	434b      	muls	r3, r1
    19b0:	3401      	adds	r4, #1
    19b2:	189b      	adds	r3, r3, r2
    19b4:	2001      	movs	r0, #1
    19b6:	e789      	b.n	18cc <_vfiprintf_r+0xc8>
    19b8:	2301      	movs	r3, #1
    19ba:	425b      	negs	r3, r3
    19bc:	e7c6      	b.n	194c <_vfiprintf_r+0x148>
    19be:	2300      	movs	r3, #0
    19c0:	0014      	movs	r4, r2
    19c2:	200a      	movs	r0, #10
    19c4:	001a      	movs	r2, r3
    19c6:	606b      	str	r3, [r5, #4]
    19c8:	7821      	ldrb	r1, [r4, #0]
    19ca:	3930      	subs	r1, #48	; 0x30
    19cc:	2909      	cmp	r1, #9
    19ce:	d903      	bls.n	19d8 <_vfiprintf_r+0x1d4>
    19d0:	2b00      	cmp	r3, #0
    19d2:	d0bc      	beq.n	194e <_vfiprintf_r+0x14a>
    19d4:	9207      	str	r2, [sp, #28]
    19d6:	e7ba      	b.n	194e <_vfiprintf_r+0x14a>
    19d8:	4342      	muls	r2, r0
    19da:	3401      	adds	r4, #1
    19dc:	1852      	adds	r2, r2, r1
    19de:	2301      	movs	r3, #1
    19e0:	e7f2      	b.n	19c8 <_vfiprintf_r+0x1c4>
    19e2:	3307      	adds	r3, #7
    19e4:	e7d5      	b.n	1992 <_vfiprintf_r+0x18e>
    19e6:	ab05      	add	r3, sp, #20
    19e8:	9300      	str	r3, [sp, #0]
    19ea:	003a      	movs	r2, r7
    19ec:	4b12      	ldr	r3, [pc, #72]	; (1a38 <_vfiprintf_r+0x234>)
    19ee:	0029      	movs	r1, r5
    19f0:	0030      	movs	r0, r6
    19f2:	e000      	b.n	19f6 <_vfiprintf_r+0x1f2>
    19f4:	bf00      	nop
    19f6:	9003      	str	r0, [sp, #12]
    19f8:	9b03      	ldr	r3, [sp, #12]
    19fa:	3301      	adds	r3, #1
    19fc:	d1cc      	bne.n	1998 <_vfiprintf_r+0x194>
    19fe:	89bb      	ldrh	r3, [r7, #12]
    1a00:	065b      	lsls	r3, r3, #25
    1a02:	d500      	bpl.n	1a06 <_vfiprintf_r+0x202>
    1a04:	e77b      	b.n	18fe <_vfiprintf_r+0xfa>
    1a06:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1a08:	e77b      	b.n	1902 <_vfiprintf_r+0xfe>
    1a0a:	ab05      	add	r3, sp, #20
    1a0c:	9300      	str	r3, [sp, #0]
    1a0e:	003a      	movs	r2, r7
    1a10:	4b09      	ldr	r3, [pc, #36]	; (1a38 <_vfiprintf_r+0x234>)
    1a12:	0029      	movs	r1, r5
    1a14:	0030      	movs	r0, r6
    1a16:	f000 f87f 	bl	1b18 <_printf_i>
    1a1a:	e7ec      	b.n	19f6 <_vfiprintf_r+0x1f2>
    1a1c:	00001fd8 	.word	0x00001fd8
    1a20:	00002018 	.word	0x00002018
    1a24:	00001ff8 	.word	0x00001ff8
    1a28:	00001fb8 	.word	0x00001fb8
    1a2c:	0000201e 	.word	0x0000201e
    1a30:	00002022 	.word	0x00002022
    1a34:	00000000 	.word	0x00000000
    1a38:	000017df 	.word	0x000017df

00001a3c <_printf_common>:
    1a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1a3e:	0015      	movs	r5, r2
    1a40:	9301      	str	r3, [sp, #4]
    1a42:	688a      	ldr	r2, [r1, #8]
    1a44:	690b      	ldr	r3, [r1, #16]
    1a46:	9000      	str	r0, [sp, #0]
    1a48:	000c      	movs	r4, r1
    1a4a:	4293      	cmp	r3, r2
    1a4c:	da00      	bge.n	1a50 <_printf_common+0x14>
    1a4e:	0013      	movs	r3, r2
    1a50:	0022      	movs	r2, r4
    1a52:	602b      	str	r3, [r5, #0]
    1a54:	3243      	adds	r2, #67	; 0x43
    1a56:	7812      	ldrb	r2, [r2, #0]
    1a58:	2a00      	cmp	r2, #0
    1a5a:	d001      	beq.n	1a60 <_printf_common+0x24>
    1a5c:	3301      	adds	r3, #1
    1a5e:	602b      	str	r3, [r5, #0]
    1a60:	6823      	ldr	r3, [r4, #0]
    1a62:	069b      	lsls	r3, r3, #26
    1a64:	d502      	bpl.n	1a6c <_printf_common+0x30>
    1a66:	682b      	ldr	r3, [r5, #0]
    1a68:	3302      	adds	r3, #2
    1a6a:	602b      	str	r3, [r5, #0]
    1a6c:	2706      	movs	r7, #6
    1a6e:	6823      	ldr	r3, [r4, #0]
    1a70:	401f      	ands	r7, r3
    1a72:	d027      	beq.n	1ac4 <_printf_common+0x88>
    1a74:	0023      	movs	r3, r4
    1a76:	3343      	adds	r3, #67	; 0x43
    1a78:	781b      	ldrb	r3, [r3, #0]
    1a7a:	1e5a      	subs	r2, r3, #1
    1a7c:	4193      	sbcs	r3, r2
    1a7e:	6822      	ldr	r2, [r4, #0]
    1a80:	0692      	lsls	r2, r2, #26
    1a82:	d430      	bmi.n	1ae6 <_printf_common+0xaa>
    1a84:	0022      	movs	r2, r4
    1a86:	9901      	ldr	r1, [sp, #4]
    1a88:	3243      	adds	r2, #67	; 0x43
    1a8a:	9800      	ldr	r0, [sp, #0]
    1a8c:	9e08      	ldr	r6, [sp, #32]
    1a8e:	47b0      	blx	r6
    1a90:	1c43      	adds	r3, r0, #1
    1a92:	d025      	beq.n	1ae0 <_printf_common+0xa4>
    1a94:	2306      	movs	r3, #6
    1a96:	6820      	ldr	r0, [r4, #0]
    1a98:	682a      	ldr	r2, [r5, #0]
    1a9a:	68e1      	ldr	r1, [r4, #12]
    1a9c:	4003      	ands	r3, r0
    1a9e:	2500      	movs	r5, #0
    1aa0:	2b04      	cmp	r3, #4
    1aa2:	d103      	bne.n	1aac <_printf_common+0x70>
    1aa4:	1a8d      	subs	r5, r1, r2
    1aa6:	43eb      	mvns	r3, r5
    1aa8:	17db      	asrs	r3, r3, #31
    1aaa:	401d      	ands	r5, r3
    1aac:	68a3      	ldr	r3, [r4, #8]
    1aae:	6922      	ldr	r2, [r4, #16]
    1ab0:	4293      	cmp	r3, r2
    1ab2:	dd01      	ble.n	1ab8 <_printf_common+0x7c>
    1ab4:	1a9b      	subs	r3, r3, r2
    1ab6:	18ed      	adds	r5, r5, r3
    1ab8:	2700      	movs	r7, #0
    1aba:	42bd      	cmp	r5, r7
    1abc:	d120      	bne.n	1b00 <_printf_common+0xc4>
    1abe:	2000      	movs	r0, #0
    1ac0:	e010      	b.n	1ae4 <_printf_common+0xa8>
    1ac2:	3701      	adds	r7, #1
    1ac4:	68e3      	ldr	r3, [r4, #12]
    1ac6:	682a      	ldr	r2, [r5, #0]
    1ac8:	1a9b      	subs	r3, r3, r2
    1aca:	429f      	cmp	r7, r3
    1acc:	dad2      	bge.n	1a74 <_printf_common+0x38>
    1ace:	0022      	movs	r2, r4
    1ad0:	2301      	movs	r3, #1
    1ad2:	3219      	adds	r2, #25
    1ad4:	9901      	ldr	r1, [sp, #4]
    1ad6:	9800      	ldr	r0, [sp, #0]
    1ad8:	9e08      	ldr	r6, [sp, #32]
    1ada:	47b0      	blx	r6
    1adc:	1c43      	adds	r3, r0, #1
    1ade:	d1f0      	bne.n	1ac2 <_printf_common+0x86>
    1ae0:	2001      	movs	r0, #1
    1ae2:	4240      	negs	r0, r0
    1ae4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1ae6:	2030      	movs	r0, #48	; 0x30
    1ae8:	18e1      	adds	r1, r4, r3
    1aea:	3143      	adds	r1, #67	; 0x43
    1aec:	7008      	strb	r0, [r1, #0]
    1aee:	0021      	movs	r1, r4
    1af0:	1c5a      	adds	r2, r3, #1
    1af2:	3145      	adds	r1, #69	; 0x45
    1af4:	7809      	ldrb	r1, [r1, #0]
    1af6:	18a2      	adds	r2, r4, r2
    1af8:	3243      	adds	r2, #67	; 0x43
    1afa:	3302      	adds	r3, #2
    1afc:	7011      	strb	r1, [r2, #0]
    1afe:	e7c1      	b.n	1a84 <_printf_common+0x48>
    1b00:	0022      	movs	r2, r4
    1b02:	2301      	movs	r3, #1
    1b04:	321a      	adds	r2, #26
    1b06:	9901      	ldr	r1, [sp, #4]
    1b08:	9800      	ldr	r0, [sp, #0]
    1b0a:	9e08      	ldr	r6, [sp, #32]
    1b0c:	47b0      	blx	r6
    1b0e:	1c43      	adds	r3, r0, #1
    1b10:	d0e6      	beq.n	1ae0 <_printf_common+0xa4>
    1b12:	3701      	adds	r7, #1
    1b14:	e7d1      	b.n	1aba <_printf_common+0x7e>
	...

00001b18 <_printf_i>:
    1b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b1a:	b08b      	sub	sp, #44	; 0x2c
    1b1c:	9206      	str	r2, [sp, #24]
    1b1e:	000a      	movs	r2, r1
    1b20:	3243      	adds	r2, #67	; 0x43
    1b22:	9307      	str	r3, [sp, #28]
    1b24:	9005      	str	r0, [sp, #20]
    1b26:	9204      	str	r2, [sp, #16]
    1b28:	7e0a      	ldrb	r2, [r1, #24]
    1b2a:	000c      	movs	r4, r1
    1b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1b2e:	2a6e      	cmp	r2, #110	; 0x6e
    1b30:	d100      	bne.n	1b34 <_printf_i+0x1c>
    1b32:	e08f      	b.n	1c54 <_printf_i+0x13c>
    1b34:	d817      	bhi.n	1b66 <_printf_i+0x4e>
    1b36:	2a63      	cmp	r2, #99	; 0x63
    1b38:	d02c      	beq.n	1b94 <_printf_i+0x7c>
    1b3a:	d808      	bhi.n	1b4e <_printf_i+0x36>
    1b3c:	2a00      	cmp	r2, #0
    1b3e:	d100      	bne.n	1b42 <_printf_i+0x2a>
    1b40:	e099      	b.n	1c76 <_printf_i+0x15e>
    1b42:	2a58      	cmp	r2, #88	; 0x58
    1b44:	d054      	beq.n	1bf0 <_printf_i+0xd8>
    1b46:	0026      	movs	r6, r4
    1b48:	3642      	adds	r6, #66	; 0x42
    1b4a:	7032      	strb	r2, [r6, #0]
    1b4c:	e029      	b.n	1ba2 <_printf_i+0x8a>
    1b4e:	2a64      	cmp	r2, #100	; 0x64
    1b50:	d001      	beq.n	1b56 <_printf_i+0x3e>
    1b52:	2a69      	cmp	r2, #105	; 0x69
    1b54:	d1f7      	bne.n	1b46 <_printf_i+0x2e>
    1b56:	6821      	ldr	r1, [r4, #0]
    1b58:	681a      	ldr	r2, [r3, #0]
    1b5a:	0608      	lsls	r0, r1, #24
    1b5c:	d523      	bpl.n	1ba6 <_printf_i+0x8e>
    1b5e:	1d11      	adds	r1, r2, #4
    1b60:	6019      	str	r1, [r3, #0]
    1b62:	6815      	ldr	r5, [r2, #0]
    1b64:	e025      	b.n	1bb2 <_printf_i+0x9a>
    1b66:	2a73      	cmp	r2, #115	; 0x73
    1b68:	d100      	bne.n	1b6c <_printf_i+0x54>
    1b6a:	e088      	b.n	1c7e <_printf_i+0x166>
    1b6c:	d808      	bhi.n	1b80 <_printf_i+0x68>
    1b6e:	2a6f      	cmp	r2, #111	; 0x6f
    1b70:	d029      	beq.n	1bc6 <_printf_i+0xae>
    1b72:	2a70      	cmp	r2, #112	; 0x70
    1b74:	d1e7      	bne.n	1b46 <_printf_i+0x2e>
    1b76:	2220      	movs	r2, #32
    1b78:	6809      	ldr	r1, [r1, #0]
    1b7a:	430a      	orrs	r2, r1
    1b7c:	6022      	str	r2, [r4, #0]
    1b7e:	e003      	b.n	1b88 <_printf_i+0x70>
    1b80:	2a75      	cmp	r2, #117	; 0x75
    1b82:	d020      	beq.n	1bc6 <_printf_i+0xae>
    1b84:	2a78      	cmp	r2, #120	; 0x78
    1b86:	d1de      	bne.n	1b46 <_printf_i+0x2e>
    1b88:	0022      	movs	r2, r4
    1b8a:	2178      	movs	r1, #120	; 0x78
    1b8c:	3245      	adds	r2, #69	; 0x45
    1b8e:	7011      	strb	r1, [r2, #0]
    1b90:	4a6c      	ldr	r2, [pc, #432]	; (1d44 <_printf_i+0x22c>)
    1b92:	e030      	b.n	1bf6 <_printf_i+0xde>
    1b94:	000e      	movs	r6, r1
    1b96:	681a      	ldr	r2, [r3, #0]
    1b98:	3642      	adds	r6, #66	; 0x42
    1b9a:	1d11      	adds	r1, r2, #4
    1b9c:	6019      	str	r1, [r3, #0]
    1b9e:	6813      	ldr	r3, [r2, #0]
    1ba0:	7033      	strb	r3, [r6, #0]
    1ba2:	2301      	movs	r3, #1
    1ba4:	e079      	b.n	1c9a <_printf_i+0x182>
    1ba6:	0649      	lsls	r1, r1, #25
    1ba8:	d5d9      	bpl.n	1b5e <_printf_i+0x46>
    1baa:	1d11      	adds	r1, r2, #4
    1bac:	6019      	str	r1, [r3, #0]
    1bae:	2300      	movs	r3, #0
    1bb0:	5ed5      	ldrsh	r5, [r2, r3]
    1bb2:	2d00      	cmp	r5, #0
    1bb4:	da03      	bge.n	1bbe <_printf_i+0xa6>
    1bb6:	232d      	movs	r3, #45	; 0x2d
    1bb8:	9a04      	ldr	r2, [sp, #16]
    1bba:	426d      	negs	r5, r5
    1bbc:	7013      	strb	r3, [r2, #0]
    1bbe:	4b62      	ldr	r3, [pc, #392]	; (1d48 <_printf_i+0x230>)
    1bc0:	270a      	movs	r7, #10
    1bc2:	9303      	str	r3, [sp, #12]
    1bc4:	e02f      	b.n	1c26 <_printf_i+0x10e>
    1bc6:	6820      	ldr	r0, [r4, #0]
    1bc8:	6819      	ldr	r1, [r3, #0]
    1bca:	0605      	lsls	r5, r0, #24
    1bcc:	d503      	bpl.n	1bd6 <_printf_i+0xbe>
    1bce:	1d08      	adds	r0, r1, #4
    1bd0:	6018      	str	r0, [r3, #0]
    1bd2:	680d      	ldr	r5, [r1, #0]
    1bd4:	e005      	b.n	1be2 <_printf_i+0xca>
    1bd6:	0640      	lsls	r0, r0, #25
    1bd8:	d5f9      	bpl.n	1bce <_printf_i+0xb6>
    1bda:	680d      	ldr	r5, [r1, #0]
    1bdc:	1d08      	adds	r0, r1, #4
    1bde:	6018      	str	r0, [r3, #0]
    1be0:	b2ad      	uxth	r5, r5
    1be2:	4b59      	ldr	r3, [pc, #356]	; (1d48 <_printf_i+0x230>)
    1be4:	2708      	movs	r7, #8
    1be6:	9303      	str	r3, [sp, #12]
    1be8:	2a6f      	cmp	r2, #111	; 0x6f
    1bea:	d018      	beq.n	1c1e <_printf_i+0x106>
    1bec:	270a      	movs	r7, #10
    1bee:	e016      	b.n	1c1e <_printf_i+0x106>
    1bf0:	3145      	adds	r1, #69	; 0x45
    1bf2:	700a      	strb	r2, [r1, #0]
    1bf4:	4a54      	ldr	r2, [pc, #336]	; (1d48 <_printf_i+0x230>)
    1bf6:	9203      	str	r2, [sp, #12]
    1bf8:	681a      	ldr	r2, [r3, #0]
    1bfa:	6821      	ldr	r1, [r4, #0]
    1bfc:	1d10      	adds	r0, r2, #4
    1bfe:	6018      	str	r0, [r3, #0]
    1c00:	6815      	ldr	r5, [r2, #0]
    1c02:	0608      	lsls	r0, r1, #24
    1c04:	d522      	bpl.n	1c4c <_printf_i+0x134>
    1c06:	07cb      	lsls	r3, r1, #31
    1c08:	d502      	bpl.n	1c10 <_printf_i+0xf8>
    1c0a:	2320      	movs	r3, #32
    1c0c:	4319      	orrs	r1, r3
    1c0e:	6021      	str	r1, [r4, #0]
    1c10:	2710      	movs	r7, #16
    1c12:	2d00      	cmp	r5, #0
    1c14:	d103      	bne.n	1c1e <_printf_i+0x106>
    1c16:	2320      	movs	r3, #32
    1c18:	6822      	ldr	r2, [r4, #0]
    1c1a:	439a      	bics	r2, r3
    1c1c:	6022      	str	r2, [r4, #0]
    1c1e:	0023      	movs	r3, r4
    1c20:	2200      	movs	r2, #0
    1c22:	3343      	adds	r3, #67	; 0x43
    1c24:	701a      	strb	r2, [r3, #0]
    1c26:	6863      	ldr	r3, [r4, #4]
    1c28:	60a3      	str	r3, [r4, #8]
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	db5c      	blt.n	1ce8 <_printf_i+0x1d0>
    1c2e:	2204      	movs	r2, #4
    1c30:	6821      	ldr	r1, [r4, #0]
    1c32:	4391      	bics	r1, r2
    1c34:	6021      	str	r1, [r4, #0]
    1c36:	2d00      	cmp	r5, #0
    1c38:	d158      	bne.n	1cec <_printf_i+0x1d4>
    1c3a:	9e04      	ldr	r6, [sp, #16]
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d064      	beq.n	1d0a <_printf_i+0x1f2>
    1c40:	0026      	movs	r6, r4
    1c42:	9b03      	ldr	r3, [sp, #12]
    1c44:	3642      	adds	r6, #66	; 0x42
    1c46:	781b      	ldrb	r3, [r3, #0]
    1c48:	7033      	strb	r3, [r6, #0]
    1c4a:	e05e      	b.n	1d0a <_printf_i+0x1f2>
    1c4c:	0648      	lsls	r0, r1, #25
    1c4e:	d5da      	bpl.n	1c06 <_printf_i+0xee>
    1c50:	b2ad      	uxth	r5, r5
    1c52:	e7d8      	b.n	1c06 <_printf_i+0xee>
    1c54:	6809      	ldr	r1, [r1, #0]
    1c56:	681a      	ldr	r2, [r3, #0]
    1c58:	0608      	lsls	r0, r1, #24
    1c5a:	d505      	bpl.n	1c68 <_printf_i+0x150>
    1c5c:	1d11      	adds	r1, r2, #4
    1c5e:	6019      	str	r1, [r3, #0]
    1c60:	6813      	ldr	r3, [r2, #0]
    1c62:	6962      	ldr	r2, [r4, #20]
    1c64:	601a      	str	r2, [r3, #0]
    1c66:	e006      	b.n	1c76 <_printf_i+0x15e>
    1c68:	0649      	lsls	r1, r1, #25
    1c6a:	d5f7      	bpl.n	1c5c <_printf_i+0x144>
    1c6c:	1d11      	adds	r1, r2, #4
    1c6e:	6019      	str	r1, [r3, #0]
    1c70:	6813      	ldr	r3, [r2, #0]
    1c72:	8aa2      	ldrh	r2, [r4, #20]
    1c74:	801a      	strh	r2, [r3, #0]
    1c76:	2300      	movs	r3, #0
    1c78:	9e04      	ldr	r6, [sp, #16]
    1c7a:	6123      	str	r3, [r4, #16]
    1c7c:	e054      	b.n	1d28 <_printf_i+0x210>
    1c7e:	681a      	ldr	r2, [r3, #0]
    1c80:	1d11      	adds	r1, r2, #4
    1c82:	6019      	str	r1, [r3, #0]
    1c84:	6816      	ldr	r6, [r2, #0]
    1c86:	2100      	movs	r1, #0
    1c88:	6862      	ldr	r2, [r4, #4]
    1c8a:	0030      	movs	r0, r6
    1c8c:	f000 f91a 	bl	1ec4 <memchr>
    1c90:	2800      	cmp	r0, #0
    1c92:	d001      	beq.n	1c98 <_printf_i+0x180>
    1c94:	1b80      	subs	r0, r0, r6
    1c96:	6060      	str	r0, [r4, #4]
    1c98:	6863      	ldr	r3, [r4, #4]
    1c9a:	6123      	str	r3, [r4, #16]
    1c9c:	2300      	movs	r3, #0
    1c9e:	9a04      	ldr	r2, [sp, #16]
    1ca0:	7013      	strb	r3, [r2, #0]
    1ca2:	e041      	b.n	1d28 <_printf_i+0x210>
    1ca4:	6923      	ldr	r3, [r4, #16]
    1ca6:	0032      	movs	r2, r6
    1ca8:	9906      	ldr	r1, [sp, #24]
    1caa:	9805      	ldr	r0, [sp, #20]
    1cac:	9d07      	ldr	r5, [sp, #28]
    1cae:	47a8      	blx	r5
    1cb0:	1c43      	adds	r3, r0, #1
    1cb2:	d043      	beq.n	1d3c <_printf_i+0x224>
    1cb4:	6823      	ldr	r3, [r4, #0]
    1cb6:	2500      	movs	r5, #0
    1cb8:	079b      	lsls	r3, r3, #30
    1cba:	d40f      	bmi.n	1cdc <_printf_i+0x1c4>
    1cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cbe:	68e0      	ldr	r0, [r4, #12]
    1cc0:	4298      	cmp	r0, r3
    1cc2:	da3d      	bge.n	1d40 <_printf_i+0x228>
    1cc4:	0018      	movs	r0, r3
    1cc6:	e03b      	b.n	1d40 <_printf_i+0x228>
    1cc8:	0022      	movs	r2, r4
    1cca:	2301      	movs	r3, #1
    1ccc:	3219      	adds	r2, #25
    1cce:	9906      	ldr	r1, [sp, #24]
    1cd0:	9805      	ldr	r0, [sp, #20]
    1cd2:	9e07      	ldr	r6, [sp, #28]
    1cd4:	47b0      	blx	r6
    1cd6:	1c43      	adds	r3, r0, #1
    1cd8:	d030      	beq.n	1d3c <_printf_i+0x224>
    1cda:	3501      	adds	r5, #1
    1cdc:	68e3      	ldr	r3, [r4, #12]
    1cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1ce0:	1a9b      	subs	r3, r3, r2
    1ce2:	429d      	cmp	r5, r3
    1ce4:	dbf0      	blt.n	1cc8 <_printf_i+0x1b0>
    1ce6:	e7e9      	b.n	1cbc <_printf_i+0x1a4>
    1ce8:	2d00      	cmp	r5, #0
    1cea:	d0a9      	beq.n	1c40 <_printf_i+0x128>
    1cec:	9e04      	ldr	r6, [sp, #16]
    1cee:	0028      	movs	r0, r5
    1cf0:	0039      	movs	r1, r7
    1cf2:	f7fe fffb 	bl	cec <__aeabi_uidivmod>
    1cf6:	9b03      	ldr	r3, [sp, #12]
    1cf8:	3e01      	subs	r6, #1
    1cfa:	5c5b      	ldrb	r3, [r3, r1]
    1cfc:	0028      	movs	r0, r5
    1cfe:	7033      	strb	r3, [r6, #0]
    1d00:	0039      	movs	r1, r7
    1d02:	f7fe ff6d 	bl	be0 <__udivsi3>
    1d06:	1e05      	subs	r5, r0, #0
    1d08:	d1f1      	bne.n	1cee <_printf_i+0x1d6>
    1d0a:	2f08      	cmp	r7, #8
    1d0c:	d109      	bne.n	1d22 <_printf_i+0x20a>
    1d0e:	6823      	ldr	r3, [r4, #0]
    1d10:	07db      	lsls	r3, r3, #31
    1d12:	d506      	bpl.n	1d22 <_printf_i+0x20a>
    1d14:	6863      	ldr	r3, [r4, #4]
    1d16:	6922      	ldr	r2, [r4, #16]
    1d18:	4293      	cmp	r3, r2
    1d1a:	dc02      	bgt.n	1d22 <_printf_i+0x20a>
    1d1c:	2330      	movs	r3, #48	; 0x30
    1d1e:	3e01      	subs	r6, #1
    1d20:	7033      	strb	r3, [r6, #0]
    1d22:	9b04      	ldr	r3, [sp, #16]
    1d24:	1b9b      	subs	r3, r3, r6
    1d26:	6123      	str	r3, [r4, #16]
    1d28:	9b07      	ldr	r3, [sp, #28]
    1d2a:	aa09      	add	r2, sp, #36	; 0x24
    1d2c:	9300      	str	r3, [sp, #0]
    1d2e:	0021      	movs	r1, r4
    1d30:	9b06      	ldr	r3, [sp, #24]
    1d32:	9805      	ldr	r0, [sp, #20]
    1d34:	f7ff fe82 	bl	1a3c <_printf_common>
    1d38:	1c43      	adds	r3, r0, #1
    1d3a:	d1b3      	bne.n	1ca4 <_printf_i+0x18c>
    1d3c:	2001      	movs	r0, #1
    1d3e:	4240      	negs	r0, r0
    1d40:	b00b      	add	sp, #44	; 0x2c
    1d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d44:	0000203a 	.word	0x0000203a
    1d48:	00002029 	.word	0x00002029

00001d4c <_sbrk_r>:
    1d4c:	2300      	movs	r3, #0
    1d4e:	b570      	push	{r4, r5, r6, lr}
    1d50:	4c06      	ldr	r4, [pc, #24]	; (1d6c <_sbrk_r+0x20>)
    1d52:	0005      	movs	r5, r0
    1d54:	0008      	movs	r0, r1
    1d56:	6023      	str	r3, [r4, #0]
    1d58:	f7fe fcac 	bl	6b4 <_sbrk>
    1d5c:	1c43      	adds	r3, r0, #1
    1d5e:	d103      	bne.n	1d68 <_sbrk_r+0x1c>
    1d60:	6823      	ldr	r3, [r4, #0]
    1d62:	2b00      	cmp	r3, #0
    1d64:	d000      	beq.n	1d68 <_sbrk_r+0x1c>
    1d66:	602b      	str	r3, [r5, #0]
    1d68:	bd70      	pop	{r4, r5, r6, pc}
    1d6a:	46c0      	nop			; (mov r8, r8)
    1d6c:	200000a4 	.word	0x200000a4

00001d70 <__sread>:
    1d70:	b570      	push	{r4, r5, r6, lr}
    1d72:	000c      	movs	r4, r1
    1d74:	250e      	movs	r5, #14
    1d76:	5f49      	ldrsh	r1, [r1, r5]
    1d78:	f000 f8b2 	bl	1ee0 <_read_r>
    1d7c:	2800      	cmp	r0, #0
    1d7e:	db03      	blt.n	1d88 <__sread+0x18>
    1d80:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1d82:	181b      	adds	r3, r3, r0
    1d84:	6563      	str	r3, [r4, #84]	; 0x54
    1d86:	bd70      	pop	{r4, r5, r6, pc}
    1d88:	89a3      	ldrh	r3, [r4, #12]
    1d8a:	4a02      	ldr	r2, [pc, #8]	; (1d94 <__sread+0x24>)
    1d8c:	4013      	ands	r3, r2
    1d8e:	81a3      	strh	r3, [r4, #12]
    1d90:	e7f9      	b.n	1d86 <__sread+0x16>
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	ffffefff 	.word	0xffffefff

00001d98 <__swrite>:
    1d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d9a:	001f      	movs	r7, r3
    1d9c:	898b      	ldrh	r3, [r1, #12]
    1d9e:	0005      	movs	r5, r0
    1da0:	000c      	movs	r4, r1
    1da2:	0016      	movs	r6, r2
    1da4:	05db      	lsls	r3, r3, #23
    1da6:	d505      	bpl.n	1db4 <__swrite+0x1c>
    1da8:	230e      	movs	r3, #14
    1daa:	5ec9      	ldrsh	r1, [r1, r3]
    1dac:	2200      	movs	r2, #0
    1dae:	2302      	movs	r3, #2
    1db0:	f000 f874 	bl	1e9c <_lseek_r>
    1db4:	89a3      	ldrh	r3, [r4, #12]
    1db6:	4a05      	ldr	r2, [pc, #20]	; (1dcc <__swrite+0x34>)
    1db8:	0028      	movs	r0, r5
    1dba:	4013      	ands	r3, r2
    1dbc:	81a3      	strh	r3, [r4, #12]
    1dbe:	0032      	movs	r2, r6
    1dc0:	230e      	movs	r3, #14
    1dc2:	5ee1      	ldrsh	r1, [r4, r3]
    1dc4:	003b      	movs	r3, r7
    1dc6:	f000 f81f 	bl	1e08 <_write_r>
    1dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dcc:	ffffefff 	.word	0xffffefff

00001dd0 <__sseek>:
    1dd0:	b570      	push	{r4, r5, r6, lr}
    1dd2:	000c      	movs	r4, r1
    1dd4:	250e      	movs	r5, #14
    1dd6:	5f49      	ldrsh	r1, [r1, r5]
    1dd8:	f000 f860 	bl	1e9c <_lseek_r>
    1ddc:	89a3      	ldrh	r3, [r4, #12]
    1dde:	1c42      	adds	r2, r0, #1
    1de0:	d103      	bne.n	1dea <__sseek+0x1a>
    1de2:	4a05      	ldr	r2, [pc, #20]	; (1df8 <__sseek+0x28>)
    1de4:	4013      	ands	r3, r2
    1de6:	81a3      	strh	r3, [r4, #12]
    1de8:	bd70      	pop	{r4, r5, r6, pc}
    1dea:	2280      	movs	r2, #128	; 0x80
    1dec:	0152      	lsls	r2, r2, #5
    1dee:	4313      	orrs	r3, r2
    1df0:	81a3      	strh	r3, [r4, #12]
    1df2:	6560      	str	r0, [r4, #84]	; 0x54
    1df4:	e7f8      	b.n	1de8 <__sseek+0x18>
    1df6:	46c0      	nop			; (mov r8, r8)
    1df8:	ffffefff 	.word	0xffffefff

00001dfc <__sclose>:
    1dfc:	b510      	push	{r4, lr}
    1dfe:	230e      	movs	r3, #14
    1e00:	5ec9      	ldrsh	r1, [r1, r3]
    1e02:	f000 f815 	bl	1e30 <_close_r>
    1e06:	bd10      	pop	{r4, pc}

00001e08 <_write_r>:
    1e08:	b570      	push	{r4, r5, r6, lr}
    1e0a:	0005      	movs	r5, r0
    1e0c:	0008      	movs	r0, r1
    1e0e:	0011      	movs	r1, r2
    1e10:	2200      	movs	r2, #0
    1e12:	4c06      	ldr	r4, [pc, #24]	; (1e2c <_write_r+0x24>)
    1e14:	6022      	str	r2, [r4, #0]
    1e16:	001a      	movs	r2, r3
    1e18:	f7fe fe84 	bl	b24 <_write>
    1e1c:	1c43      	adds	r3, r0, #1
    1e1e:	d103      	bne.n	1e28 <_write_r+0x20>
    1e20:	6823      	ldr	r3, [r4, #0]
    1e22:	2b00      	cmp	r3, #0
    1e24:	d000      	beq.n	1e28 <_write_r+0x20>
    1e26:	602b      	str	r3, [r5, #0]
    1e28:	bd70      	pop	{r4, r5, r6, pc}
    1e2a:	46c0      	nop			; (mov r8, r8)
    1e2c:	200000a4 	.word	0x200000a4

00001e30 <_close_r>:
    1e30:	2300      	movs	r3, #0
    1e32:	b570      	push	{r4, r5, r6, lr}
    1e34:	4c06      	ldr	r4, [pc, #24]	; (1e50 <_close_r+0x20>)
    1e36:	0005      	movs	r5, r0
    1e38:	0008      	movs	r0, r1
    1e3a:	6023      	str	r3, [r4, #0]
    1e3c:	f7fe fc4c 	bl	6d8 <_close>
    1e40:	1c43      	adds	r3, r0, #1
    1e42:	d103      	bne.n	1e4c <_close_r+0x1c>
    1e44:	6823      	ldr	r3, [r4, #0]
    1e46:	2b00      	cmp	r3, #0
    1e48:	d000      	beq.n	1e4c <_close_r+0x1c>
    1e4a:	602b      	str	r3, [r5, #0]
    1e4c:	bd70      	pop	{r4, r5, r6, pc}
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	200000a4 	.word	0x200000a4

00001e54 <_fstat_r>:
    1e54:	2300      	movs	r3, #0
    1e56:	b570      	push	{r4, r5, r6, lr}
    1e58:	4c06      	ldr	r4, [pc, #24]	; (1e74 <_fstat_r+0x20>)
    1e5a:	0005      	movs	r5, r0
    1e5c:	0008      	movs	r0, r1
    1e5e:	0011      	movs	r1, r2
    1e60:	6023      	str	r3, [r4, #0]
    1e62:	f7fe fc3c 	bl	6de <_fstat>
    1e66:	1c43      	adds	r3, r0, #1
    1e68:	d103      	bne.n	1e72 <_fstat_r+0x1e>
    1e6a:	6823      	ldr	r3, [r4, #0]
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	d000      	beq.n	1e72 <_fstat_r+0x1e>
    1e70:	602b      	str	r3, [r5, #0]
    1e72:	bd70      	pop	{r4, r5, r6, pc}
    1e74:	200000a4 	.word	0x200000a4

00001e78 <_isatty_r>:
    1e78:	2300      	movs	r3, #0
    1e7a:	b570      	push	{r4, r5, r6, lr}
    1e7c:	4c06      	ldr	r4, [pc, #24]	; (1e98 <_isatty_r+0x20>)
    1e7e:	0005      	movs	r5, r0
    1e80:	0008      	movs	r0, r1
    1e82:	6023      	str	r3, [r4, #0]
    1e84:	f7fe fc30 	bl	6e8 <_isatty>
    1e88:	1c43      	adds	r3, r0, #1
    1e8a:	d103      	bne.n	1e94 <_isatty_r+0x1c>
    1e8c:	6823      	ldr	r3, [r4, #0]
    1e8e:	2b00      	cmp	r3, #0
    1e90:	d000      	beq.n	1e94 <_isatty_r+0x1c>
    1e92:	602b      	str	r3, [r5, #0]
    1e94:	bd70      	pop	{r4, r5, r6, pc}
    1e96:	46c0      	nop			; (mov r8, r8)
    1e98:	200000a4 	.word	0x200000a4

00001e9c <_lseek_r>:
    1e9c:	b570      	push	{r4, r5, r6, lr}
    1e9e:	0005      	movs	r5, r0
    1ea0:	0008      	movs	r0, r1
    1ea2:	0011      	movs	r1, r2
    1ea4:	2200      	movs	r2, #0
    1ea6:	4c06      	ldr	r4, [pc, #24]	; (1ec0 <_lseek_r+0x24>)
    1ea8:	6022      	str	r2, [r4, #0]
    1eaa:	001a      	movs	r2, r3
    1eac:	f7fe fc1e 	bl	6ec <_lseek>
    1eb0:	1c43      	adds	r3, r0, #1
    1eb2:	d103      	bne.n	1ebc <_lseek_r+0x20>
    1eb4:	6823      	ldr	r3, [r4, #0]
    1eb6:	2b00      	cmp	r3, #0
    1eb8:	d000      	beq.n	1ebc <_lseek_r+0x20>
    1eba:	602b      	str	r3, [r5, #0]
    1ebc:	bd70      	pop	{r4, r5, r6, pc}
    1ebe:	46c0      	nop			; (mov r8, r8)
    1ec0:	200000a4 	.word	0x200000a4

00001ec4 <memchr>:
    1ec4:	b2c9      	uxtb	r1, r1
    1ec6:	1882      	adds	r2, r0, r2
    1ec8:	4290      	cmp	r0, r2
    1eca:	d101      	bne.n	1ed0 <memchr+0xc>
    1ecc:	2000      	movs	r0, #0
    1ece:	4770      	bx	lr
    1ed0:	7803      	ldrb	r3, [r0, #0]
    1ed2:	428b      	cmp	r3, r1
    1ed4:	d0fb      	beq.n	1ece <memchr+0xa>
    1ed6:	3001      	adds	r0, #1
    1ed8:	e7f6      	b.n	1ec8 <memchr+0x4>

00001eda <__malloc_lock>:
    1eda:	4770      	bx	lr

00001edc <__malloc_unlock>:
    1edc:	4770      	bx	lr
	...

00001ee0 <_read_r>:
    1ee0:	b570      	push	{r4, r5, r6, lr}
    1ee2:	0005      	movs	r5, r0
    1ee4:	0008      	movs	r0, r1
    1ee6:	0011      	movs	r1, r2
    1ee8:	2200      	movs	r2, #0
    1eea:	4c06      	ldr	r4, [pc, #24]	; (1f04 <_read_r+0x24>)
    1eec:	6022      	str	r2, [r4, #0]
    1eee:	001a      	movs	r2, r3
    1ef0:	f7fe fe04 	bl	afc <_read>
    1ef4:	1c43      	adds	r3, r0, #1
    1ef6:	d103      	bne.n	1f00 <_read_r+0x20>
    1ef8:	6823      	ldr	r3, [r4, #0]
    1efa:	2b00      	cmp	r3, #0
    1efc:	d000      	beq.n	1f00 <_read_r+0x20>
    1efe:	602b      	str	r3, [r5, #0]
    1f00:	bd70      	pop	{r4, r5, r6, pc}
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	200000a4 	.word	0x200000a4
    1f08:	682f2e2e 	.word	0x682f2e2e
    1f0c:	732f6c61 	.word	0x732f6c61
    1f10:	682f6372 	.word	0x682f6372
    1f14:	615f6c61 	.word	0x615f6c61
    1f18:	735f6364 	.word	0x735f6364
    1f1c:	2e636e79 	.word	0x2e636e79
    1f20:	00000063 	.word	0x00000063
    1f24:	682f2e2e 	.word	0x682f2e2e
    1f28:	732f6c61 	.word	0x732f6c61
    1f2c:	682f6372 	.word	0x682f6372
    1f30:	695f6c61 	.word	0x695f6c61
    1f34:	00632e6f 	.word	0x00632e6f
    1f38:	682f2e2e 	.word	0x682f2e2e
    1f3c:	732f6c61 	.word	0x732f6c61
    1f40:	682f6372 	.word	0x682f6372
    1f44:	755f6c61 	.word	0x755f6c61
    1f48:	74726173 	.word	0x74726173
    1f4c:	6e79735f 	.word	0x6e79735f
    1f50:	00632e63 	.word	0x00632e63

00001f54 <_adcs>:
    1f54:	00020200 01200000 00000000 00001806     ...... .........
	...
    1f70:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    1f80:	632e6364 00000000 682f2e2e 732f6c70     dc.c....../hpl/s
    1f90:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    1fa0:	0000632e 30304150 30253d36 0a0d6433     .c..PA006=%03d..
    1fb0:	00000000                                ....

00001fb4 <_global_impure_ptr>:
    1fb4:	20000004                                ... 

00001fb8 <__sf_fake_stderr>:
	...

00001fd8 <__sf_fake_stdin>:
	...

00001ff8 <__sf_fake_stdout>:
	...
    2018:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2028:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2038:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2048:	00006665                                ef..

0000204c <_init>:
    204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    204e:	46c0      	nop			; (mov r8, r8)
    2050:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2052:	bc08      	pop	{r3}
    2054:	469e      	mov	lr, r3
    2056:	4770      	bx	lr

00002058 <__init_array_start>:
    2058:	000000dd 	.word	0x000000dd

0000205c <_fini>:
    205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    205e:	46c0      	nop			; (mov r8, r8)
    2060:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2062:	bc08      	pop	{r3}
    2064:	469e      	mov	lr, r3
    2066:	4770      	bx	lr

00002068 <__fini_array_start>:
    2068:	000000b5 	.word	0x000000b5
